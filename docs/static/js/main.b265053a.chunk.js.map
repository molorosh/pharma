{"version":3,"sources":["logo.svg","db.js","DrugSchedule.js","DateTimePicker.js","Drug.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","db","Dexie","version","stores","persons","meds","DrugSchedule","val","_this","this","hours","Array","from","keys","map","n","react_default","a","createElement","key","value","formatTo00","minutes","days","props","id","hour","minute","amount","unit","Component","DateTimePicker","Object","classCallCheck","undefined","year","day","month","valueDate","possibleConstructorReturn","getPrototypeOf","call","dateFromFormattedString","getHours","getFullYear","getMonth","getMinutes","getDate","state","isEdit","isEditable","currentMinutes","currentHours","currentDay","currentMonth","currentYear","doEdit","bind","assertThisInitialized","doCancel","doUpdate","doChangeHours","doChangeMinutes","doChangeDay","doChangeMonth","doChangeYear","resetCurrentValues","checkDayForValidity","stringForCurrentDate","setState","parsedYear","parsedMonth","parsedDay","parsedHour","parsedMinute","dateObject","formattedString","parsedDateNumber","Date","parse","parsedDate","Number","NaN","formatted","onChange","event","target","_this2","_this3","maxDays","daysInMonth","parseInt","iYear","iMonth","max","_this4","parsedDateString","stringFromDateObject","editControl","className","readControl","selectHours","selectMinutes","selectDay","months","selectMonth","yy","unshift","years","selectYear","title","onClick","Drug","name","timestamp","schedules","nextId","dummyDateString","handleChangeUnit","handleChangeName","handleChangeAmount","handleFormSubmit","addNewSchedule","handleDrugScheduleDelete","handleDrugScheduleUpdate","handleDatePickerChange","dateString","console","log","preventDefault","newSchedule","everyNdays","concat","alert","newHour","newMinute","newAmount","newEveryNDays","units","slice","onSubmit","type","e","src_DateTimePicker","src_DrugSchedule","App","colors","icons","newUserName","newUserColor","newUserIcon","doChangeNewUserName","doChangeNewUserColor","doChangeNewUserIcon","doAddNewUser","fetchAllData","fetchOnlyUsers","fetchOnlyMeds","doAddNewMed","doMedsCalculations","str","match","table","toArray","then","length","x","xMax","med","stockAmount","scheduleAmount","dayFrom","stockDate","now","today","UTC","getUTCFullYear","getUTCMonth","getUTCDate","until","valueOf","setDate","timeDiff","getTime","dayDiff","Math","ceil","daysLeft","fromDateToDateString","personId","medName","document","getElementById","medDose","medStrength","medStock","medEveryNDays","newMedUnits","isSomething","strength","add","c","i","isEmptyOrSpaces","person","icon","color","date","output","m","d","_this5","inlineStyles","backgroundColor","style","selectColorsStyle","selectColors","selectIcons","personsHtml","medsHtml","role","aria-label","defaultValue","newDrugName","elem","src","logo","alt","size","maxLength","src_Drug","Boolean","window","location","hostname","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,8PCKlCC,EAAK,UAAIC,GAAM,oBAGrBD,EAAGE,QAAQ,GAAGC,OACV,CACIC,QAAS,SAGjBJ,EAAGE,QAAQ,GAAGC,OACV,CACIC,QAAS,OACTC,KAAM,kBAGCL,QCyCAM,qLAzCAC,GACP,OAAGA,EAAM,GACE,IAAMA,EAENA,mCAIP,IAAAC,EAAAC,KAEEC,EADKC,MAAMC,KAAKD,MAAM,IAAIE,QACfC,IAAI,SAACC,GAAD,OAAOC,EAAAC,EAAAC,cAAA,UAAQC,IAAKJ,EAAGK,MAAOL,GAAIP,EAAKa,WAAWN,MAEjEO,EADKX,MAAMC,KAAKD,MAAM,IAAIE,QACbC,IAAI,SAACC,GAAD,OAAOC,EAAAC,EAAAC,cAAA,UAAQC,IAAKJ,EAAGK,MAAOL,GAAIP,EAAKa,WAAWN,MAEnEQ,EADKZ,MAAMC,KAAKD,MAAM,IAAIE,QAChBC,IAAI,SAACC,GAAD,OAAOC,EAAAC,EAAAC,cAAA,UAAQC,IAAKJ,EAAE,EAAGK,MAAOL,EAAE,GAAIA,EAAE,KAC5D,OACIC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,gBACST,KAAKe,MAAMC,GADpB,UAGUhB,KAAKe,MAAME,KACjBV,EAAAC,EAAAC,cAAA,cAAUR,GAJd,YAMYD,KAAKe,MAAMG,OACnBX,EAAAC,EAAAC,cAAA,cAASI,GAPb,WASUN,EAAAC,EAAAC,cAAA,cAASK,GATnB,kBAWYd,KAAKe,MAAMI,OAXvB,MAaMnB,KAAKe,MAAMK,KAbjB,MAeIb,EAAAC,EAAAC,cAAA,wBAfJ,IAiBIF,EAAAC,EAAAC,cAAA,iCAlDOY,aC4RZC,cApRX,SAAAA,EAAYP,GAAM,IAAAhB,EAAAwB,OAAAC,EAAA,EAAAD,CAAAvB,KAAAsB,GAEd,IAAIrB,OAAQwB,EACRC,OAAOD,EACPZ,OAAUY,EACVE,OAAMF,EACNG,OAAQH,EACRI,GANJ9B,EAAAwB,OAAAO,EAAA,EAAAP,CAAAvB,KAAAuB,OAAAQ,EAAA,EAAAR,CAAAD,GAAAU,KAAAhC,KAAMe,KAMekB,wBAAwBlB,EAAMJ,OAPrC,OAQG,OAAdkB,IACC5B,EAAQ4B,EAAUK,WAClBR,EAAOG,EAAUM,cACjBP,EAAQ,EAAIC,EAAUO,WACtBvB,EAAUgB,EAAUQ,aACpBV,EAAME,EAAUS,WAEpBvC,EAAKwC,MAAQ,CACTC,OAAQzB,EAAMyB,OACdC,WAAY1B,EAAM0B,WAClB9B,MAAOI,EAAMJ,MACb+B,eAAgB7B,EAChB8B,aAAc1C,EACd2C,WAAYjB,EACZkB,aAAcjB,EACdkB,YAAapB,GAIjB3B,EAAKgD,OAAShD,EAAKgD,OAAOC,KAAZzB,OAAA0B,EAAA,EAAA1B,QAAA0B,EAAA,EAAA1B,CAAAxB,KACdA,EAAKmD,SAAWnD,EAAKmD,SAASF,KAAdzB,OAAA0B,EAAA,EAAA1B,QAAA0B,EAAA,EAAA1B,CAAAxB,KAChBA,EAAKoD,SAAWpD,EAAKoD,SAASH,KAAdzB,OAAA0B,EAAA,EAAA1B,QAAA0B,EAAA,EAAA1B,CAAAxB,KAChBA,EAAKqD,cAAgBrD,EAAKqD,cAAcJ,KAAnBzB,OAAA0B,EAAA,EAAA1B,QAAA0B,EAAA,EAAA1B,CAAAxB,KACrBA,EAAKsD,gBAAkBtD,EAAKsD,gBAAgBL,KAArBzB,OAAA0B,EAAA,EAAA1B,QAAA0B,EAAA,EAAA1B,CAAAxB,KACvBA,EAAKuD,YAAcvD,EAAKuD,YAAYN,KAAjBzB,OAAA0B,EAAA,EAAA1B,QAAA0B,EAAA,EAAA1B,CAAAxB,KACnBA,EAAKwD,cAAgBxD,EAAKwD,cAAcP,KAAnBzB,OAAA0B,EAAA,EAAA1B,QAAA0B,EAAA,EAAA1B,CAAAxB,KACrBA,EAAKyD,aAAezD,EAAKyD,aAAaR,KAAlBzB,OAAA0B,EAAA,EAAA1B,QAAA0B,EAAA,EAAA1B,CAAAxB,KACpBA,EAAK0D,mBAAqB1D,EAAK0D,mBAAmBT,KAAxBzB,OAAA0B,EAAA,EAAA1B,QAAA0B,EAAA,EAAA1B,CAAAxB,KAC1BA,EAAK2D,oBAAsB3D,EAAK2D,oBAAoBV,KAAzBzB,OAAA0B,EAAA,EAAA1B,QAAA0B,EAAA,EAAA1B,CAAAxB,KAC3BA,EAAK4D,qBAAuB5D,EAAK4D,qBAAqBX,KAA1BzB,OAAA0B,EAAA,EAAA1B,QAAA0B,EAAA,EAAA1B,CAAAxB,KArCdA,oFAiDd,IAAIE,OAAQwB,EACRC,OAAOD,EACPZ,OAAUY,EACVE,OAAMF,EACNG,OAAQH,EACRI,EAAY7B,KAAKiC,wBAAwBjC,KAAKuC,MAAM5B,OACvC,OAAdkB,IACC5B,EAAQ4B,EAAUK,WAClBR,EAAOG,EAAUM,cACjBP,EAAQ,EAAIC,EAAUO,WACtBvB,EAAUgB,EAAUQ,aACpBV,EAAME,EAAUS,WAEpBtC,KAAK4D,SACD,CACIlB,eAAgB7B,EAChB8B,aAAc1C,EACd2C,WAAYjB,EACZkB,aAAcjB,EACdkB,YAAapB,mDAMrB,IAAImC,EAAa7D,KAAKuC,MAAMO,YACxBgB,EAAc9D,KAAKuC,MAAMM,aACzBkB,EAAY/D,KAAKuC,MAAMK,WACvBoB,EAAahE,KAAKuC,MAAMI,aACxBsB,EAAejE,KAAKuC,MAAMG,eAM9B,OALsBmB,EAChB,IAAM7D,KAAKY,WAAWkD,GACtB,IAAM9D,KAAKY,WAAWmD,GACtB,IAAM/D,KAAKY,WAAWoD,GACtB,IAAMhE,KAAKY,WAAWqD,gDAIXC,GACjB,IAAIL,EAAaK,EAAW/B,cACxB2B,EAAc,EAAII,EAAW9B,WAC7B2B,EAAYG,EAAW5B,UACvB0B,EAAaE,EAAWhC,WACxB+B,EAAeC,EAAW7B,aAM9B,OALsBwB,EAChB,KAAOC,EAAY,GAAG,IAAIA,EAAYA,GACtC,KAAOC,EAAU,GAAG,IAAIA,EAAUA,GAClC,KAAOC,EAAW,GAAG,IAAIA,EAAWA,GACpC,KAAOC,EAAa,GAAG,IAAIA,EAAaA,mDAI1BE,GACpB,IAAIC,EAAmBC,KAAKC,MAAMH,GAC9BI,EAAa,KAIjB,OAHGH,IAAqBI,OAAOC,MAC3BF,EAAa,IAAIF,KAAKD,IAEnBG,qCAGAzE,GACP,OAAGA,EAAM,GACE,IAAMA,EAENA,mCAKXE,KAAK4D,SAAS,CAACpB,QAAQ,uCAIvBxC,KAAKyD,qBACLzD,KAAK4D,SAAS,CAACpB,QAAQ,uCAIvB,IAAIkC,EAAY1E,KAAK2D,uBACrB3D,KAAKe,MAAM4D,SAASD,GACpB1E,KAAK4D,SAAS,CAACpB,QAAO,0CAGZoC,GACV5E,KAAK4D,SAAS,CAACjB,aAAciC,EAAMC,OAAOlE,gDAG9BiE,GACZ5E,KAAK4D,SAAS,CAAClB,eAAgBkC,EAAMC,OAAOlE,6CAGnCiE,GAAM,IAAAE,EAAA9E,KACfA,KAAK4D,SACD,CAACd,YAAa8B,EAAMC,OAAOlE,OAC3B,kBAAMmE,EAAKpB,8DAILkB,GAAM,IAAAG,EAAA/E,KAChBA,KAAK4D,SACD,CAACf,aAAc+B,EAAMC,OAAOlE,OAC5B,kBAAMoE,EAAKrB,4DAIPkB,GACR5E,KAAK4D,SAAS,CAAChB,WAAYgC,EAAMC,OAAOlE,sDAIxC,IAAIqE,EAAU,QACevD,IAA1BzB,KAAKuC,MAAMK,aACVoC,EAAUhF,KAAKiF,YACXjF,KAAKuC,MAAMO,YACX9C,KAAKuC,MAAMM,aAAe,GAEnBqC,SAASlF,KAAKuC,MAAMK,YACrBoC,GACNhF,KAAK4D,SAAS,CAAChB,WAAYoC,yCAK3BG,EAAOC,GAEf,IAAIC,EAAM,GACNzD,EAAQsD,SAASE,GACrB,GAAa,IAAVxD,GACc,IAAVA,GACU,IAAVA,GACU,KAAVA,EACHyD,EAAM,QACJ,GAAa,IAAVzD,EAAY,CACjB,IAAIF,EAAOwD,SAASC,GAEhBE,GADD3D,EAAO,MAAQ,EAAIA,EAAO,MAAQ,EAAIA,EAAO,IAAM,GAC5C,GAEA,GAGd,OAAO2D,mCAGH,IAAAC,EAAAtF,KACAuE,EAAavE,KAAKiC,wBAAwBjC,KAAKuC,MAAM5B,OACrD4E,EAAmB,KACL,OAAfhB,IACCgB,EAAmBvF,KAAKwF,qBAAqBjB,IAEjD,IAAIkB,EAAelF,EAAAC,EAAAC,cAAA,QAAMiF,UAAU,gBAC/BC,EAAepF,EAAAC,EAAAC,cAAA,QAAMiF,UAAU,gBACnC,GAAG1F,KAAKuC,MAAMC,QAAUxC,KAAKuC,MAAME,WAAW,CAE1C,IACMxC,EADKC,MAAMC,KAAKD,MAAM,IAAIE,QACfC,IAAI,SAACC,GAAD,OAAOC,EAAAC,EAAAC,cAAA,UAAQC,IAAKJ,EAAGK,MAAOL,GAAIgF,EAAK1E,WAAWN,MACnEsF,EAAcrF,EAAAC,EAAAC,cAAA,UAAQkE,SAAU3E,KAAKoD,cAAezC,MAAOX,KAAKuC,MAAMI,cACrE1C,GAGCY,EADOX,MAAMC,KAAKD,MAAM,IAAIE,QACbC,IAAI,SAACC,GAAD,OAAOC,EAAAC,EAAAC,cAAA,UAAQC,IAAKJ,EAAGK,MAAOL,GAAIgF,EAAK1E,WAAWN,MACvEuF,EAAgBtF,EAAAC,EAAAC,cAAA,UAAQkE,SAAU3E,KAAKqD,gBAAiB1C,MAAOX,KAAKuC,MAAMG,gBACzE7B,GAIDmE,EAAU,QACevD,IAA1BzB,KAAKuC,MAAMK,aACVoC,EAAUhF,KAAKiF,YACXjF,KAAKuC,MAAMO,YACX9C,KAAKuC,MAAMM,aAAe,IAGlC,IACM/B,EADKZ,MAAMC,KAAKD,MAAM8E,GAAS5E,QACrBC,IAAI,SAACC,GAAD,OAAOC,EAAAC,EAAAC,cAAA,UAAQC,IAAKJ,EAAGK,MAAOL,EAAE,GAAIgF,EAAK1E,WAAWN,EAAE,MACtEwF,EAAYvF,EAAAC,EAAAC,cAAA,UAAQkE,SAAU3E,KAAKsD,YAAa3C,MAAOX,KAAKuC,MAAMK,YACjE9B,GAGCiF,EADK7F,MAAMC,KAAKD,MAAM,IAAIE,QACdC,IAAI,SAACC,GAAD,OAAOC,EAAAC,EAAAC,cAAA,UAAQC,IAAKJ,EAAGK,MAAOL,EAAE,GAAIgF,EAAK1E,WAAWN,EAAE,MACxE0F,EAAczF,EAAAC,EAAAC,cAAA,UAAQkE,SAAU3E,KAAKuD,cAAe5C,MAAOX,KAAKuC,MAAMM,cACrEkD,GAEDE,EAAK,CAAC,KAAK,KAAK,WACUxE,IAA3BzB,KAAKuC,MAAMO,aAA6B9C,KAAKuC,MAAMO,YAAc,MAChEmD,EAAGC,QAAQlG,KAAKuC,MAAMO,aAE1B,IAAMqD,EAAQF,EAAG5F,IAAI,SAACC,GAAD,OAAOC,EAAAC,EAAAC,cAAA,UAAQC,IAAKJ,EAAGK,MAAOL,GAAIgF,EAAK1E,WAAWN,MACnE8F,EAAa7F,EAAAC,EAAAC,cAAA,UAAQkE,SAAU3E,KAAKwD,aAAc7C,MAAOX,KAAKuC,MAAMO,aACnEqD,GAELV,EAAclF,EAAAC,EAAAC,cAAA,YACdF,EAAAC,EAAAC,cAAA,SACIF,EAAAC,EAAAC,cAAA,QAAMiF,UAAU,wBAAwB1F,KAAKe,MAAMsF,OADvD,IAEKD,EAFL,IAGKJ,EAHL,IAIKF,EAJL,IAKKF,EALL,IAMKC,EACDtF,EAAAC,EAAAC,cAAA,UAAQiF,UAAU,+BAAgCY,QAAStG,KAAKmD,UAAhE,UACA5C,EAAAC,EAAAC,cAAA,UAAQiF,UAAU,+BAAgCY,QAAStG,KAAKkD,UAAhE,iBAKAyC,EADD3F,KAAKuC,MAAME,WACIlC,EAAAC,EAAAC,cAAA,YACdF,EAAAC,EAAAC,cAAA,SACIF,EAAAC,EAAAC,cAAA,QAAMiF,UAAU,wBAAwB1F,KAAKe,MAAMsF,OADvD,KACuEd,EACnEhF,EAAAC,EAAAC,cAAA,UAAQiF,UAAU,6BAA6BY,QAAStG,KAAK+C,QAA7D,UAIUxC,EAAAC,EAAAC,cAAA,YACdF,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,QAAMiF,UAAU,wBAAwB1F,KAAKe,MAAMsF,OAAtD,MAAuEd,IAK/E,OACIhF,EAAAC,EAAAC,cAAA,WACKgF,EACAE,UA/QYtE,aC2HdkF,cAhIX,SAAAA,EAAYxF,GAAM,IAAAhB,EAAA,OAAAwB,OAAAC,EAAA,EAAAD,CAAAvB,KAAAuG,IACdxG,EAAAwB,OAAAO,EAAA,EAAAP,CAAAvB,KAAAuB,OAAAQ,EAAA,EAAAR,CAAAgF,GAAAvE,KAAAhC,KAAMe,KACDwB,MAAQ,CACTiE,KAAM,GACNpF,KAAM,GACND,OAAQ,GACRsF,eAAWhF,EACXiF,UAAW,GACXC,OAAQ,EACRC,gBAAiB,oBAGrB7G,EAAK8G,iBAAmB9G,EAAK8G,iBAAiB7D,KAAtBzB,OAAA0B,EAAA,EAAA1B,QAAA0B,EAAA,EAAA1B,CAAAxB,KACxBA,EAAK+G,iBAAmB/G,EAAK+G,iBAAiB9D,KAAtBzB,OAAA0B,EAAA,EAAA1B,QAAA0B,EAAA,EAAA1B,CAAAxB,KACxBA,EAAKgH,mBAAqBhH,EAAKgH,mBAAmB/D,KAAxBzB,OAAA0B,EAAA,EAAA1B,QAAA0B,EAAA,EAAA1B,CAAAxB,KAC1BA,EAAKiH,iBAAmBjH,EAAKiH,iBAAiBhE,KAAtBzB,OAAA0B,EAAA,EAAA1B,QAAA0B,EAAA,EAAA1B,CAAAxB,KAExBA,EAAKkH,eAAiBlH,EAAKkH,eAAejE,KAApBzB,OAAA0B,EAAA,EAAA1B,QAAA0B,EAAA,EAAA1B,CAAAxB,KACtBA,EAAKmH,yBAA2BnH,EAAKmH,yBAAyBlE,KAA9BzB,OAAA0B,EAAA,EAAA1B,QAAA0B,EAAA,EAAA1B,CAAAxB,KAChCA,EAAKoH,yBAA2BpH,EAAKoH,yBAAyBnE,KAA9BzB,OAAA0B,EAAA,EAAA1B,QAAA0B,EAAA,EAAA1B,CAAAxB,KAEhCA,EAAKqH,uBAAyBrH,EAAKqH,uBAAuBpE,KAA5BzB,OAAA0B,EAAA,EAAA1B,QAAA0B,EAAA,EAAA1B,CAAAxB,KArBhBA,sFAwBKsH,GACnBC,QAAQC,IAAI,+BACZD,QAAQC,IAAI,eACZD,QAAQC,IAAIF,GACZrH,KAAK4D,SACD,CAACgD,gBAAiBS,GAChB,WACEC,QAAQC,IAAI,8DAKP3C,GACb5E,KAAK4D,SAAS,CAACxC,KAAMwD,EAAMC,OAAOlE,iDAGrBiE,GACb5E,KAAK4D,SAAS,CAAC4C,KAAM5B,EAAMC,OAAOlE,mDAGnBiE,GACf5E,KAAK4D,SAAS,CAACzC,OAAQyD,EAAMC,OAAOlE,iDAGvBiE,GACbA,EAAM4C,0DAIN,IAAIb,EAAS3G,KAAKuC,MAAMoE,OAAS,EAC7Bc,EAAc,CAACxG,KAAK,GAAIC,OAAO,GAAIC,OAAQ,EAAGuG,WAAY,EAAG1G,GAAI2F,GACrE3G,KAAK4D,SACD,CACI8C,UAAW1G,KAAKuC,MAAMmE,UAAUiB,OAAOF,GACvCd,OAAQA,qDAKK3F,GACrB4G,MAAM,UAAY5G,oDAGGA,EAAI6G,EAASC,EAAWC,EAAWC,GACxDJ,MAAM,QAAU5G,EAAK,IAAM6G,EAAU,IAAMC,EAAY,IAAMC,EAAY,IAAMC,oCAG3E,IAAAlD,EAAA9E,KACEiI,EAAQjI,KAAKe,MAAMkH,MAAMC,QACzBxB,EAAY1G,KAAKuC,MAAMmE,UAAUwB,QACvC,OACI3H,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,QAAM0H,SAAUnI,KAAKgH,kBACjBzG,EAAAC,EAAAC,cAAA,iBAEIF,EAAAC,EAAAC,cAAA,SAAO2H,KAAK,OAAOzH,MAAOX,KAAKuC,MAAMiE,KAAM7B,SAAU3E,KAAK8G,oBAE9DvG,EAAAC,EAAAC,cAAA,mBAEIF,EAAAC,EAAAC,cAAA,SAAO2H,KAAK,SAASzH,MAAOX,KAAKuC,MAAMpB,OAAQwD,SAAU3E,KAAK+G,qBAC9DxG,EAAAC,EAAAC,cAAA,UAAQE,MAAOX,KAAKuC,MAAMnB,KAAMuD,SAAU3E,KAAK6G,kBAC1CoB,EAAM5H,IAAI,SAACgI,EAAG3H,GACX,OAAOH,EAAAC,EAAAC,cAAA,UAAQC,IAAKA,EAAKC,MAAO0H,GAAIA,EAA7B,KAAkC3H,EAAlC,SAInBH,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,4BACAF,EAAAC,EAAAC,cAAA,4BAAoBT,KAAKuC,MAAMqE,iBAC/BrG,EAAAC,EAAAC,cAAC6H,EAAD,CACIjC,MAAM,QACN7D,QAAQ,EACRC,YAAY,EACZ9B,MAAOX,KAAKuC,MAAMqE,gBAClBjC,SAAU3E,KAAKoH,uBAIf1G,IAAKV,KAAKuC,MAAMqE,kBAGpBrG,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,UAAQ6F,QAAStG,KAAKiH,gBAAtB,iBAECP,EAAUrG,IACN,SAACgI,EAAG3H,GACA,OAAOH,EAAAC,EAAAC,cAAC8H,EAAD,CACH7H,IAAK2H,EAAErH,GACPA,GAAIqH,EAAErH,GACNC,KAAMoH,EAAEpH,KACRC,OAAQmH,EAAEnH,OACVC,OAAQkH,EAAElH,OACVC,KAAM0D,EAAKvC,MAAMnB,kBAtHlCC,aCyTJmH,qBAtTb,SAAAA,EAAYzH,GAAM,IAAAhB,EAAA,OAAAwB,OAAAC,EAAA,EAAAD,CAAAvB,KAAAwI,IAChBzI,EAAAwB,OAAAO,EAAA,EAAAP,CAAAvB,KAAAuB,OAAAQ,EAAA,EAAAR,CAAAiH,GAAAxG,KAAAhC,KAAMe,KACDwB,MAAQ,CACT0F,MAAO,CAAC,UAAU,KAAK,MACvBQ,OAAQ,CAAC,OAAO,SAAS,SAAS,SAAS,QAAQ,aACnDC,MAAO,CAAC,SAAI,SAAI,SAAI,SAAI,SAAI,UAC5BC,YAAa,GACbC,aAAc,OACdC,YAAa,SACbpJ,QAAS,UACTG,KAAM,IAIVG,EAAK+G,iBAAmB/G,EAAK+G,iBAAiB9D,KAAtBzB,OAAA0B,EAAA,EAAA1B,QAAA0B,EAAA,EAAA1B,CAAAxB,KACxBA,EAAK+I,oBAAsB/I,EAAK+I,oBAAoB9F,KAAzBzB,OAAA0B,EAAA,EAAA1B,QAAA0B,EAAA,EAAA1B,CAAAxB,KAC3BA,EAAKgJ,qBAAuBhJ,EAAKgJ,qBAAqB/F,KAA1BzB,OAAA0B,EAAA,EAAA1B,QAAA0B,EAAA,EAAA1B,CAAAxB,KAC5BA,EAAKiJ,oBAAsBjJ,EAAKiJ,oBAAoBhG,KAAzBzB,OAAA0B,EAAA,EAAA1B,QAAA0B,EAAA,EAAA1B,CAAAxB,KAC3BA,EAAKkJ,aAAelJ,EAAKkJ,aAAajG,KAAlBzB,OAAA0B,EAAA,EAAA1B,QAAA0B,EAAA,EAAA1B,CAAAxB,KACpBA,EAAKmJ,aAAenJ,EAAKmJ,aAAalG,KAAlBzB,OAAA0B,EAAA,EAAA1B,QAAA0B,EAAA,EAAA1B,CAAAxB,KACpBA,EAAKoJ,eAAiBpJ,EAAKoJ,eAAenG,KAApBzB,OAAA0B,EAAA,EAAA1B,QAAA0B,EAAA,EAAA1B,CAAAxB,KACtBA,EAAKqJ,cAAgBrJ,EAAKqJ,cAAcpG,KAAnBzB,OAAA0B,EAAA,EAAA1B,QAAA0B,EAAA,EAAA1B,CAAAxB,KACrBA,EAAKsJ,YAActJ,EAAKsJ,YAAYrG,KAAjBzB,OAAA0B,EAAA,EAAA1B,QAAA0B,EAAA,EAAA1B,CAAAxB,KACnBA,EAAKuJ,mBAAqBvJ,EAAKuJ,mBAAmBtG,KAAxBzB,OAAA0B,EAAA,EAAA1B,QAAA0B,EAAA,EAAA1B,CAAAxB,KAvBVA,mFA4BhBC,KAAKkJ,uDAGSK,GACd,OAAe,OAARA,GAAsC,OAAtBA,EAAIC,MAAM,4CAGvBD,GACV,QAAiB,OAARA,GAAsC,OAAtBA,EAAIC,MAAM,kDAGrB,IAAA1E,EAAA9E,KACdT,EAAGkK,MAAM,WACNC,UACAC,KAAK,SAAChK,GACLmF,EAAKlB,SAAU,CAAEjE,sDAIR,IAAAoF,EAAA/E,KACbT,EAAGkK,MAAM,QACNC,UACAC,KAAK,SAAC/J,GACL,GAAGA,GAAQA,EAAKgK,OACd,IAAI,IAAIC,EAAI,EAAGC,EAAOlK,EAAKgK,OAAQC,EAAIC,EAAMD,IAC3C9E,EAAKuE,mBAAmB1J,EAAKiK,IAGjC9E,EAAKnB,SAAU,CAAEhE,kDAIT,IAAA0F,EAAAtF,KAIZT,EAAGkK,MAAM,WACNC,UACAC,KAAK,SAAChK,GACL2F,EAAK1B,SAAU,CAAEjE,WAAW2F,EAAK8D,8DAIpBW,GAMjB,IACIjJ,EADQiJ,EAAIC,YAAcD,EAAIE,eACfF,EAAIrC,WAGnBwC,EAAU,IAAI7F,KAAKA,KAAKC,MAAMyF,EAAII,UAAY,eAE9CC,EAAM,IAAI/F,KACVgG,EAAQ,IAAIhG,KAAKA,KAAKiG,IAAIF,EAAIG,iBAAkBH,EAAII,cAAeJ,EAAIK,eACvEC,EAAQ,IAAIrG,KAAK6F,EAAQS,WAC7BD,EAAME,QAAQF,EAAMpI,UAAYxB,GAGhC,IAAI+J,EAAYH,EAAMI,UAAYT,EAAMS,UACpCC,EAAUC,KAAKC,KAAKJ,EAAQ,OAEhCd,EAAImB,SAAWH,EACfhB,EAAIW,MAAQ1K,KAAKmL,qBAAqBT,uCAG5BU,GACV,IAAIC,EAAUC,SAASC,eAAe,cAAgBH,GAAUzK,MAC5D6K,EAAUF,SAASC,eAAe,cAAgBH,GAAUzK,MAC5D8K,EAAcH,SAASC,eAAe,kBAAoBH,GAAUzK,MACpE+K,EAAWJ,SAASC,eAAe,eAAiBH,GAAUzK,MAC9DgL,EAAgBL,SAASC,eAAe,oBAAsBH,GAAUzK,MACxEiL,EAAcN,SAASC,eAAe,eAAiBH,GAAUzK,MASrE,GAAGX,KAAK6L,YAAYR,GAAS,CAC3B,IAAMtB,EAAM,CACVqB,SAAUA,EACV5E,KAAM6E,EACNS,SAAUL,EACVxD,MAAO2D,EACPzB,UAAWnK,KAAKqK,QAChBL,YAAa0B,EACbzB,eAAgBuB,EAChB9D,WAAYiE,GAEdpM,EAAGkK,MAAM,QACRsC,IAAIhC,GACJJ,KAAK3J,KAAKkJ,wDAKb,IAAM5I,EAAIN,KAAKuC,MAAMoG,YACfqD,EAAIhM,KAAKuC,MAAMqG,aACfqD,EAAIjM,KAAKuC,MAAMsG,YACrB,IAAI7I,KAAKkM,gBAAgB5L,GAAG,CAC1B,IAAM6L,EAAS,CACb3F,KAAMlG,EACN8L,KAAMH,EACNI,MAAOL,GAETzM,EAAGkK,MAAM,WACNsC,IAAII,GACJxC,KAAK3J,KAAKkJ,0DAIAtE,GACf5E,KAAK4D,SACH,CAAC+E,YAAa/D,EAAMC,OAAOlE,oDAIXiE,GAClB5E,KAAK4D,SACH,CAAC+E,YAAa/D,EAAMC,OAAOlE,oDAIXiE,GAClB5E,KAAK4D,SACH,CAACiF,YAAajE,EAAMC,OAAOlE,qDAIViE,GACnB5E,KAAK4D,SACH,CAACgF,aAAchE,EAAMC,OAAOlE,qDAIX2L,GACnB,IAAIC,EAASD,EAAKnK,cAAgB,IAC9BqK,EAAIF,EAAKlK,WACVoK,EAAI,IACLD,GAAU,KAEZA,GAAWC,EAAI,EAAK,IACpB,IAAIC,EAAIH,EAAKhK,UAKb,OAJGmK,EAAI,KACLF,GAAU,KAEZA,GAAUE,kCAKV,OAAOzM,KAAKmL,qBAAqB,IAAI9G,uCAG9B,IAAAqI,EAAA1M,KACDiI,EAAQjI,KAAKuC,MAAM0F,MAAMC,QAEzBO,EADKzI,KAAKuC,MAAMkG,OAAOP,QACX7H,IACd,SAACC,GACC,IAAIqM,EAAa,CAACC,gBAAiBtM,GACnC,OAAQC,EAAAC,EAAAC,cAAA,UAAQoM,MAAOF,EAAcjM,IAAKJ,EAAGK,MAAOL,GAAIA,KAE1DwM,EAAkB,CACpBF,gBAAiB5M,KAAKuC,MAAMqG,cAE1BmE,EAAexM,EAAAC,EAAAC,cAAA,UAAQoM,MAAOC,EAAmBnI,SAAU3E,KAAK+I,qBAAsBpI,MAAOX,KAAKuC,MAAMqG,cACvGH,GAGCC,EADK1I,KAAKuC,MAAMmG,MAAMR,QACX7H,IAAI,SAACC,GAAD,OAAOC,EAAAC,EAAAC,cAAA,UAAQC,IAAKJ,EAAGK,MAAOL,GAAIA,KACnD0M,EAAczM,EAAAC,EAAAC,cAAA,UAAQkE,SAAU3E,KAAKgJ,oBAAqBrI,MAAOX,KAAKuC,MAAMsG,aAC3EH,GAKCuE,EAAc,KACdC,EAAW,KACZlN,KAAKuC,MAAM5C,UAEZsN,EADWjN,KAAKuC,MAAM5C,QAAQuI,QACb7H,IAAI,SAACf,GAClB,IAAIuN,EAAQ,CAAED,gBAAiBtN,EAAE+M,OAE7BzM,EAAO8M,EAAKnK,MAAM3C,KAAKsI,QAc3B,OAbAgF,EAAWtN,EAAKS,IACd,SAACmM,GACC,OAAGA,EAAEpB,WAAa9L,EAAE0B,GACVT,EAAAC,EAAAC,cAAA,OAAKC,IAAK8L,EAAExL,IAClBT,EAAAC,EAAAC,cAAA,iBAAS+L,EAAExL,IACXT,EAAAC,EAAAC,cAAA,kBAAU+L,EAAEhG,MACZjG,EAAAC,EAAAC,cAAA,uBAAe+L,EAAEtB,UACjB3K,EAAAC,EAAAC,cAAA,mBAAW+L,EAAE9B,aAGf,IAIJnK,EAAAC,EAAAC,cAAA,OAAKC,IAAKpB,EAAE0B,GAAI0E,UAAU,gBAAgBmH,MAAOA,GAC/CtM,EAAAC,EAAAC,cAAA,UAAKnB,EAAE8M,KAAM9M,EAAEkH,MACfjG,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,eAAOnB,EAAE0B,KACZT,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,QAAM0M,KAAK,MAAMC,aAAW,YAA5B,gBAAJ,QACA7M,EAAAC,EAAAC,cAAA,kBACQF,EAAAC,EAAAC,cAAA,SAAOO,GAAI,cAAgB1B,EAAE0B,GAAIoH,KAAK,SAD9C,UAES7H,EAAAC,EAAAC,cAAA,UAAQ4M,aAAc,YAAarM,GAAI,eAAiB1B,EAAE0B,IAC7DT,EAAAC,EAAAC,cAAA,UAAQE,MAAM,aAAd,aACAJ,EAAAC,EAAAC,cAAA,UAAQE,MAAM,MAAd,MACAJ,EAAAC,EAAAC,cAAA,UAAQE,MAAM,QAAd,UALN,aAOYJ,EAAAC,EAAAC,cAAA,SAAOO,GAAI,kBAAoB1B,EAAE0B,GAAIoH,KAAK,SAPtD,SAQQ7H,EAAAC,EAAAC,cAAA,SAAOO,GAAI,cAAgB1B,EAAE0B,GAAIoH,KAAK,SAR9C,QAUI7H,EAAAC,EAAAC,cAAA,UAAQ4M,aAAc,IAAKrM,GAAI,oBAAsB1B,EAAE0B,IACrDT,EAAAC,EAAAC,cAAA,UAAQE,MAAM,KAAd,KACAJ,EAAAC,EAAAC,cAAA,UAAQE,MAAM,KAAd,KACAJ,EAAAC,EAAAC,cAAA,UAAQE,MAAM,KAAd,KACAJ,EAAAC,EAAAC,cAAA,UAAQE,MAAM,KAAd,KACAJ,EAAAC,EAAAC,cAAA,UAAQE,MAAM,KAAd,KACAJ,EAAAC,EAAAC,cAAA,UAAQE,MAAM,KAAd,KACAJ,EAAAC,EAAAC,cAAA,UAAQE,MAAM,KAAd,MAjBN,sBAmBeJ,EAAAC,EAAAC,cAAA,SAAOO,GAAI,eAAiB1B,EAAE0B,GAAIoH,KAAK,SACpD7H,EAAAC,EAAAC,cAAA,UAAQiF,UAAU,4BAChBY,QACE,WACE,IAAIgH,EAAc,KACdC,EAAOjC,SAASC,eAAe,cAAgBjM,EAAE0B,IAClDuM,IACDD,EAAcC,EAAK5M,MACnB+L,EAAKrD,YAAY/J,EAAE0B,GAAIsM,MAP/B,QAaF/M,EAAAC,EAAAC,cAAA,SAAIiM,EAAKrC,SACR6C,MAMb,OACE3M,EAAAC,EAAAC,cAAA,OAAKiF,UAAU,OACbnF,EAAAC,EAAAC,cAAA,UAAQiF,UAAU,cAChBnF,EAAAC,EAAAC,cAAA,OAAKiF,UAAU,kBACbnF,EAAAC,EAAAC,cAAA,OAAKiF,UAAU,uBAAsBnF,EAAAC,EAAAC,cAAA,OAAK+M,IAAKC,IAAM/H,UAAU,WAAWgI,IAAI,UAC9EnN,EAAAC,EAAAC,cAAA,OAAKiF,UAAU,wBAAuBnF,EAAAC,EAAAC,cAAA,uBAG1CF,EAAAC,EAAAC,cAAA,WAASiF,UAAU,cACfnF,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,QAAM0M,KAAK,MAAMC,aAAW,UAA5B,gBAAJ,UACA7M,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,sBACcF,EAAAC,EAAAC,cAAA,SAAO2H,KAAK,OAAOuF,KAAK,IAAIC,UAAU,IAAIjN,MAAOX,KAAKuC,MAAMoG,YAAahE,SAAU3E,KAAK8I,sBADtG,UAEYiE,EAFZ,SAGWC,EACPzM,EAAAC,EAAAC,cAAA,UAAQiF,UAAU,4BAA4BY,QAAStG,KAAKiJ,cAA5D,QAEHgE,GAEH1M,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,QAAM0M,KAAK,MAAMC,aAAW,YAA5B,gBAAJ,QACA7M,EAAAC,EAAAC,cAACoN,EAAD,CAAM5F,MAAOA,KAEf1H,EAAAC,EAAAC,cAAA,UAAQiF,UAAU,cAChBnF,EAAAC,EAAAC,cAAA,OAAKiF,UAAU,kBACbnF,EAAAC,EAAAC,cAAA,OAAKiF,UAAU,sBAAqBnF,EAAAC,EAAAC,cAAA,KAAGiF,UAAU,sBAAb,YAA2CnF,EAAAC,EAAAC,cAAA,QAAMiF,UAAU,sBAAsB1F,KAAKuC,MAAM9C,WAChIc,EAAAC,EAAAC,cAAA,OAAKiF,UAAU,wBAAuBnF,EAAAC,EAAAC,cAAA,KAAGiF,UAAU,wBAAb,iCA9SlCrE,cCMEyM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASzE,MACvB,2DCZN0E,IAASC,OAAO5N,EAAAC,EAAAC,cAAC2N,EAAD,MAAS9C,SAASC,eAAe,SD2H3C,kBAAmB8C,WACrBA,UAAUC,cAAcC,MAAM5E,KAAK,SAAA6E,GACjCA,EAAaC","file":"static/js/main.b265053a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.c695c8b2.svg\";","import Dexie from 'dexie';\n\n// for examples of using Dexie with React.js:\n// q.v. https://github.com/dfahlander/Dexie.js/blob/master/samples/react/src/db.js\n\nconst db = new Dexie('MoloroshPharmaDB');\n// needs to keep the older schemas so Dexie can \n// upgrade from the older version to the newer version\ndb.version(1).stores(\n    { \n        persons: '++id' \n    });\n// the latest version of the database schema\ndb.version(2).stores(\n    { \n        persons: '++id',\n        meds: '++id,personId' \n    });\n\nexport default db;\n\n// persons:\n//   ++id\n//   icon\n//   color\n//   name\n\n// meds\n//   ++id (1)\n//   personid (2)\n//   name (\"aspirin\")\n//   strength (\"500mg\")\n//   units (\"tablets\" of \"tablets\"/\"ml\")\n//   stockDate (\"2018-01-23\")\n//   stockAmount (23) \n//   scheduleAmount (2)\n//   everyNDays (1)\n//   predictedLastFullDoseDate (\"2018-05-01\")\n\n","import React, { Component } from 'react';\n//import { parentPort } from 'worker_threads';\n\nclass DrugSchedule extends Component {\n    \n    /*\n    constructor(props){\n        super(props);\n        this.state = {\n            id: props.id,\n            hour: props.hour,\n            minute: props.minute,\n            amount: props.amount,\n            everyNdays: props.everyNdays,\n            isChanged: false,\n        };\n    }\n    */\n\n    formatTo00(val){\n        if(val < 10){\n            return \"0\" + val;\n        }else{\n            return val;\n        }\n    }\n\n    render(){\n        const hh = Array.from(Array(24).keys());\n        const hours = hh.map((n) => <option key={n} value={n}>{this.formatTo00(n)}</option>);\n        const mm = Array.from(Array(60).keys());\n        const minutes = mm.map((n) => <option key={n} value={n}>{this.formatTo00(n)}</option>);\n        const dd = Array.from(Array(14).keys());\n        const days = dd.map((n) => <option key={n+1} value={n+1}>{n+1}</option>);\n        return (\n            <div>\n                <p>\n                    key:{this.props.id} \n                    |\n                    Hour:{this.props.hour} \n                    <select >{hours}</select>\n                    |\n                    Minute:{this.props.minute} \n                    <select>{minutes}</select>\n                    | \n                    Every <select>{days}</select> Days\n                    | \n                    Amount:{this.props.amount} \n                    | \n                    ({this.props.unit}) \n                    |\n                    <button>Update</button>\n                    |\n                    <button>Delete</button>\n                </p>\n            </div>\n        );\n    }\n}\n\nexport default DrugSchedule;","import React, { Component } from 'react';\n\n// note: the guidance on component updating has changed\n// see https://reactjs.org/docs/react-component.html#unsafe_componentwillreceiveprops\n\n// so componentWillReceiveProps(nextProps) {...} is considerd UNSAFE \n// and will be removed in React.js v 17\n\n// \n\nclass DateTimePicker extends Component {\n    constructor(props){\n        super(props);\n        let hours = undefined;\n        let year = undefined;\n        let minutes = undefined;\n        let day = undefined;\n        let month = undefined;\n        let valueDate = this.dateFromFormattedString(props.value);\n        if(valueDate !== null){\n            hours = valueDate.getHours();\n            year = valueDate.getFullYear();\n            month = 1 + valueDate.getMonth();\n            minutes = valueDate.getMinutes();\n            day = valueDate.getDate();\n        }\n        this.state = {\n            isEdit: props.isEdit,\n            isEditable: props.isEditable,\n            value: props.value,\n            currentMinutes: minutes,\n            currentHours: hours,\n            currentDay: day,\n            currentMonth: month,\n            currentYear: year\n        };\n        // must bind functions that require 'this.' e.g. \n        // this.setState({isEdit: false}});\n        this.doEdit = this.doEdit.bind(this);\n        this.doCancel = this.doCancel.bind(this);\n        this.doUpdate = this.doUpdate.bind(this);\n        this.doChangeHours = this.doChangeHours.bind(this);\n        this.doChangeMinutes = this.doChangeMinutes.bind(this);\n        this.doChangeDay = this.doChangeDay.bind(this);\n        this.doChangeMonth = this.doChangeMonth.bind(this);\n        this.doChangeYear = this.doChangeYear.bind(this);\n        this.resetCurrentValues = this.resetCurrentValues.bind(this);\n        this.checkDayForValidity = this.checkDayForValidity.bind(this);\n        this.stringForCurrentDate = this.stringForCurrentDate.bind(this);\n    }\n\n    /*\n    // this will make the child component listen for changes to its props\n    componentWillReceiveProps(nextProps) {\n        this.setState({ value: nextProps.value });  \n    }\n    but we are deprecating this \n    */\n\n    resetCurrentValues(){\n        let hours = undefined;\n        let year = undefined;\n        let minutes = undefined;\n        let day = undefined;\n        let month = undefined;\n        let valueDate = this.dateFromFormattedString(this.state.value);\n        if(valueDate !== null){\n            hours = valueDate.getHours();\n            year = valueDate.getFullYear();\n            month = 1 + valueDate.getMonth();\n            minutes = valueDate.getMinutes();\n            day = valueDate.getDate();\n        }\n        this.setState(\n            {\n                currentMinutes: minutes,\n                currentHours: hours,\n                currentDay: day,\n                currentMonth: month,\n                currentYear: year\n            }\n        );\n    }\n\n    stringForCurrentDate(){\n        let parsedYear = this.state.currentYear;\n        let parsedMonth = this.state.currentMonth;\n        let parsedDay = this.state.currentDay;\n        let parsedHour = this.state.currentHours;\n        let parsedMinute = this.state.currentMinutes;\n        let formattedString = parsedYear\n            + \"-\" + this.formatTo00(parsedMonth)\n            + \"-\" + this.formatTo00(parsedDay)\n            + \"T\" + this.formatTo00(parsedHour)\n            + \":\" + this.formatTo00(parsedMinute);\n        return formattedString; \n    }\n\n    stringFromDateObject(dateObject){\n        let parsedYear = dateObject.getFullYear();\n        let parsedMonth = 1 + dateObject.getMonth();\n        let parsedDay = dateObject.getDate();\n        let parsedHour = dateObject.getHours();\n        let parsedMinute = dateObject.getMinutes();\n        let formattedString = parsedYear\n            + \"-\" + (parsedMonth<10?\"0\"+parsedMonth:parsedMonth)\n            + \"-\" + (parsedDay<10?\"0\"+parsedDay:parsedDay)\n            + \"T\" + (parsedHour<10?\"0\"+parsedHour:parsedHour)\n            + \":\" + (parsedMinute<10?\"0\"+parsedMinute:parsedMinute);\n        return formattedString;\n    }\n\n    dateFromFormattedString(formattedString){\n        let parsedDateNumber = Date.parse(formattedString);\n        let parsedDate = null;\n        if(parsedDateNumber !== Number.NaN){\n            parsedDate = new Date(parsedDateNumber);\n        }\n        return parsedDate;\n    }\n\n    formatTo00(val){\n        if(val < 10){\n            return \"0\" + val;\n        }else{\n            return val;\n        }\n    }\n\n    doEdit(){\n        this.setState({isEdit: true});\n    }\n\n    doCancel(){\n        this.resetCurrentValues();\n        this.setState({isEdit: false});\n    }\n\n    doUpdate(){\n        let formatted = this.stringForCurrentDate();\n        this.props.onChange(formatted);\n        this.setState({isEdit:false})\n    }\n\n    doChangeHours(event){\n        this.setState({currentHours: event.target.value});\n    }\n    \n    doChangeMinutes(event){\n        this.setState({currentMinutes: event.target.value});\n    }\n\n    doChangeYear(event){\n        this.setState(\n            {currentYear: event.target.value},\n            () => this.checkDayForValidity() \n            );\n    }\n\n    doChangeMonth(event){\n        this.setState(\n            {currentMonth: event.target.value},\n            () => this.checkDayForValidity()\n            );\n    }\n\n    doChangeDay(event){\n        this.setState({currentDay: event.target.value});\n    }\n\n    checkDayForValidity(){\n        let maxDays = 31;\n        if(this.state.currentDay !== undefined){\n            maxDays = this.daysInMonth(\n                this.state.currentYear,\n                this.state.currentMonth - 1\n                );\n            let days = parseInt(this.state.currentDay);\n            if(days > maxDays){\n                this.setState({currentDay: maxDays});\n            }\n        }\n    }\n\n    daysInMonth(iYear, iMonth)\n    {\n        let max = 31;\n        let month = parseInt(iMonth);\n        if(month === 8 /* September */\n            || month === 4 /* April */\n            || month === 6 /* June */\n            || month === 10 /* November */){\n            max = 30;\n        }else if(month === 1){\n            let year = parseInt(iYear);\n            if(year % 100 === 0 ? year % 400 === 0 : year % 4 === 0){\n                max = 29;\n            }else{\n                max = 28;\n            }\n        }\n        return max;\n    }\n\n    render(){\n        let parsedDate = this.dateFromFormattedString(this.state.value);\n        let parsedDateString = null;\n        if(parsedDate !== null){\n            parsedDateString = this.stringFromDateObject(parsedDate);\n        }\n        let editControl = (<span className=\"editControl\"></span>);\n        let readControl = (<span className=\"readControl\"></span>);\n        if(this.state.isEdit && this.state.isEditable){\n            // just implement the editable hours for now...\n            const hh = Array.from(Array(24).keys());\n            const hours = hh.map((n) => <option key={n} value={n}>{this.formatTo00(n)}</option>);\n            let selectHours = <select onChange={this.doChangeHours} value={this.state.currentHours}>\n                {hours}\n            </select>\n            const mmmm = Array.from(Array(60).keys());\n            const minutes = mmmm.map((n) => <option key={n} value={n}>{this.formatTo00(n)}</option>);\n            let selectMinutes = <select onChange={this.doChangeMinutes} value={this.state.currentMinutes}>\n                {minutes}\n            </select>\n            // we need to ensure the number of days is valid for the \n            // year and month\n            let maxDays = 31;\n            if(this.state.currentDay !== undefined){\n                maxDays = this.daysInMonth(\n                    this.state.currentYear,\n                    this.state.currentMonth - 1\n                    );\n            }\n            const dd = Array.from(Array(maxDays).keys());\n            const days = dd.map((n) => <option key={n} value={n+1}>{this.formatTo00(n+1)}</option>);\n            let selectDay = <select onChange={this.doChangeDay} value={this.state.currentDay}>\n                {days}\n            </select>\n            const mm = Array.from(Array(12).keys());\n            const months = mm.map((n) => <option key={n} value={n+1}>{this.formatTo00(n+1)}</option>);\n            let selectMonth = <select onChange={this.doChangeMonth} value={this.state.currentMonth}>\n                {months}\n            </select>\n            let yy = [2018,2019,2020];\n            if(this.state.currentYear !== undefined && this.state.currentYear < 2018){\n                yy.unshift(this.state.currentYear);\n            }\n            const years = yy.map((n) => <option key={n} value={n}>{this.formatTo00(n)}</option>);\n            let selectYear = <select onChange={this.doChangeYear} value={this.state.currentYear}>\n                {years}\n            </select>\n            editControl = <span>\n            <p>\n                <span className=\"pharma-control-title\">{this.props.title}</span>:     \n                {selectYear}-\n                {selectMonth}-\n                {selectDay}T\n                {selectHours}:\n                {selectMinutes}\n                <button className=\"pharma-btn pharma-btn-update\"  onClick={this.doUpdate}>Update</button>\n                <button className=\"pharma-btn pharma-btn-cancel\"  onClick={this.doCancel}>Cancel</button>\n            </p>\n            </span>\n        }else{\n            if(this.state.isEditable){\n                readControl = <span>\n                <p>\n                    <span className=\"pharma-control-title\">{this.props.title}</span>: {parsedDateString}\n                    <button className=\"pharma-btn pharma-btn-edit\" onClick={this.doEdit}>Edit</button>\n                </p>\n            </span>    \n            }else{\n                readControl = <span>\n                <p><span className=\"pharma-control-title\">{this.props.title}</span>:  {parsedDateString}</p>\n            </span>\n            }\n            \n        }\n        return(\n            <div>\n                {editControl}\n                {readControl}\n            </div>\n        );\n    }\n}\n\nexport default DateTimePicker;","import React, { Component } from 'react';\nimport DrugSchedule from './DrugSchedule';\nimport DateTimePicker from './DateTimePicker';\n\nclass Drug extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            name: \"\",\n            unit: \"\",\n            amount: 28,\n            timestamp: undefined, \n            schedules: [],  \n            nextId: 1,\n            dummyDateString: \"2008-08-28T23:30\"\n        }\n        // drug events\n        this.handleChangeUnit = this.handleChangeUnit.bind(this);\n        this.handleChangeName = this.handleChangeName.bind(this);\n        this.handleChangeAmount = this.handleChangeAmount.bind(this);\n        this.handleFormSubmit = this.handleFormSubmit.bind(this);\n        // schedule events\n        this.addNewSchedule = this.addNewSchedule.bind(this);\n        this.handleDrugScheduleDelete = this.handleDrugScheduleDelete.bind(this);\n        this.handleDrugScheduleUpdate = this.handleDrugScheduleUpdate.bind(this);\n        // DatePicker events\n        this.handleDatePickerChange = this.handleDatePickerChange.bind(this);\n    }\n\n    handleDatePickerChange(dateString){\n        console.log(\"handleDatePickerChange(...)\");\n        console.log(\"dateString:\");\n        console.log(dateString);\n        this.setState(\n            {dummyDateString: dateString}\n            , ()=> {\n                console.log(\"finished update\");\n            }\n        );\n    }\n\n    handleChangeUnit(event){\n        this.setState({unit: event.target.value});\n    }\n\n    handleChangeName(event){\n        this.setState({name: event.target.value});\n    }\n\n    handleChangeAmount(event){\n        this.setState({amount: event.target.value});\n    }\n\n    handleFormSubmit(event){\n        event.preventDefault();\n    }\n\n    addNewSchedule(){\n        let nextId = this.state.nextId + 1;\n        let newSchedule = {hour:12, minute:20, amount: 3, everyNdays: 3, id: nextId};\n        this.setState(\n            { \n                schedules: this.state.schedules.concat(newSchedule),\n                nextId: nextId,\n            }\n        );\n    }\n\n    handleDrugScheduleDelete(id){\n        alert(\"delete \" + id);\n    }\n\n    handleDrugScheduleUpdate(id, newHour, newMinute, newAmount, newEveryNDays){\n        alert(\"upd8 \" + id + \" \" + newHour + \" \" + newMinute + \" \" + newAmount + \" \" + newEveryNDays);\n    }\n\n    render(){\n        const units = this.props.units.slice();\n        const schedules = this.state.schedules.slice();\n        return (\n            <div>\n                <form onSubmit={this.handleFormSubmit}>\n                    <p>\n                        name: \n                        <input type=\"text\" value={this.state.name} onChange={this.handleChangeName} />\n                    </p>\n                    <p>\n                        amount: \n                        <input type=\"number\" value={this.state.amount} onChange={this.handleChangeAmount} />\n                        <select value={this.state.unit} onChange={this.handleChangeUnit}>\n                            {units.map((e, key) => {\n                                return <option key={key} value={e}>{e} ({key})</option>;\n                            })}\n                        </select>\n                    </p>\n                    <hr></hr>\n                    <h4>DateTimePicker</h4>\n                    <p>date time data: {this.state.dummyDateString}</p>\n                    <DateTimePicker \n                        title=\"as at\"\n                        isEdit={false}\n                        isEditable={true}\n                        value={this.state.dummyDateString}\n                        onChange={this.handleDatePickerChange}\n                        // updating with a key is a great and simple\n                        // way to ensure the child component is redrawn\n                        // from scratch if the principal data is changed\n                        key={this.state.dummyDateString}\n                        >\n                    </DateTimePicker>\n                    <hr></hr>\n                    <h2>Schedules</h2>\n                    <p><button onClick={this.addNewSchedule}>Add Schedule</button></p>\n                    {\n                        schedules.map(\n                            (e, key) => {\n                                return <DrugSchedule \n                                    key={e.id} \n                                    id={e.id} \n                                    hour={e.hour} \n                                    minute={e.minute} \n                                    amount={e.amount} \n                                    unit={this.state.unit} \n                                ></DrugSchedule>;\n                            }\n                        )\n                    }\n                </form>\n            </div>\n        );\n    }\n}\n\nexport default Drug;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport db from './db';\nimport Drug from './Drug';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n        units: [\"pill(s)\",\"mg\",\"ml\"],\n        colors: [\"Pink\",\"Orchid\",\"Salmon\",\"Orange\",\"Khaki\",\"Gainsboro\"],\n        icons: [\"۝\",\"۞\",\"⊜\",\"⊞\",\"⊙\",\"⊗\"],\n        newUserName: '',\n        newUserColor: \"Pink\",\n        newUserIcon: \"۝\",\n        version: \"0.1.0.0\",\n        meds: [],\n    }\n    // must bind functions that require 'this.' e.g. \n    // this.setState({isEdit: false}});\n    this.handleChangeName = this.handleChangeName.bind(this);\n    this.doChangeNewUserName = this.doChangeNewUserName.bind(this);\n    this.doChangeNewUserColor = this.doChangeNewUserColor.bind(this);\n    this.doChangeNewUserIcon = this.doChangeNewUserIcon.bind(this);\n    this.doAddNewUser = this.doAddNewUser.bind(this);\n    this.fetchAllData = this.fetchAllData.bind(this);\n    this.fetchOnlyUsers = this.fetchOnlyUsers.bind(this);\n    this.fetchOnlyMeds = this.fetchOnlyMeds.bind(this);\n    this.doAddNewMed = this.doAddNewMed.bind(this);\n    this.doMedsCalculations = this.doMedsCalculations.bind(this);\n  }\n\n  // this is called before the \"render() method\n  componentDidMount() {\n    this.fetchAllData();\n  }\n\n  isEmptyOrSpaces(str){\n    return str === null || str.match(/^ *$/) !== null;\n  }\n\n  isSomething(str){\n    return !(str === null || str.match(/^ *$/) !== null);\n  }\n\n  fetchOnlyUsers(){\n    db.table('persons')\n      .toArray()\n      .then((persons) => {\n        this.setState( { persons } )\n      });\n  }\n\n  fetchOnlyMeds(){\n    db.table('meds')\n      .toArray()\n      .then((meds) => {\n        if(meds && meds.length){\n          for(let x = 0, xMax = meds.length; x < xMax; x++){\n            this.doMedsCalculations(meds[x]);\n          }\n        }\n        this.setState( { meds } )\n      });\n  }\n\n  fetchAllData(){\n    // although this works, it should be \n    // re-written to use Dexie \"all\" promise API\n    // so we only update the React state once at the end\n    db.table('persons')\n      .toArray()\n      .then((persons) => {\n        this.setState( { persons }, this.fetchOnlyMeds() )\n      });\n  }\n\n  doMedsCalculations(med){\n    //console.log(\"doMedsCalculations(...)\");\n    //console.log(\"med.scheduleAmount: \" + med.scheduleAmount);\n    //console.log(\"med.everyNdays: \" + med.everyNdays);\n    //console.log(\"med.stockDate: \" + med.stockDate);\n    //console.log(\"med.stockAmount: \" + med.stockAmount);\n    let doses = med.stockAmount / med.scheduleAmount; \n    let days = doses * med.everyNdays;\n    //console.log(\"doses: \" + doses);\n    //console.log(\"days: \" + days);\n    let dayFrom = new Date(Date.parse(med.stockDate + \"T00:00:00Z\"));\n    //console.log(\"dayFrom: \" + dayFrom.toLocaleDateString());\n    let now = new Date();\n    let today = new Date(Date.UTC(now.getUTCFullYear(), now.getUTCMonth(), now.getUTCDate() ));\n    let until = new Date(dayFrom.valueOf());\n    until.setDate(until.getDate() + days);\n    //console.log(\"today: \" + today.toLocaleDateString());\n    //console.log(\"until: \" + until.toLocaleDateString());\n    let timeDiff = (until.getTime() - today.getTime());\n    let dayDiff = Math.ceil(timeDiff / (1000 * 3600 * 24));\n    //console.log(\"dayDiff: \" + dayDiff);\n    med.daysLeft = dayDiff;\n    med.until = this.fromDateToDateString(until);\n  }\n\n  doAddNewMed(personId){\n    let medName = document.getElementById('newMedName_' + personId).value;\n    let medDose = document.getElementById('newMedDose_' + personId).value;\n    let medStrength = document.getElementById('newMedStrength_' + personId).value;\n    let medStock = document.getElementById('newMedStock_' + personId).value;\n    let medEveryNDays = document.getElementById('newMedEveryNDays_' + personId).value;\n    let newMedUnits = document.getElementById('newMedUnits_' + personId).value;\n\n    //console.log(\"medName: \" + medName);\n    //console.log(\"medDose: \" + medDose);\n    //console.log(\"medStrength: \" + medStrength);\n    //console.log(\"medStock: \" + medStock);\n    //console.log(\"medEveryNDays: \" + medEveryNDays);\n    //console.log(\"newMedUnits: \" + newMedUnits);\n\n    if(this.isSomething(medName)){\n      const med = {\n        personId: personId,\n        name: medName,\n        strength: medStrength,\n        units: newMedUnits,\n        stockDate: this.today(),\n        stockAmount: medStock,\n        scheduleAmount: medDose,\n        everyNdays: medEveryNDays\n      };\n      db.table('meds')\n      .add(med)\n      .then(this.fetchAllData());\n    }\n  }\n\n  doAddNewUser(){\n    const n = this.state.newUserName;\n    const c = this.state.newUserColor;\n    const i = this.state.newUserIcon;\n    if(!this.isEmptyOrSpaces(n)){\n      const person = {\n        name: n,\n        icon: i,\n        color: c\n      };\n      db.table('persons')\n        .add(person)\n        .then(this.fetchAllData());\n    }\n  }\n\n  handleChangeName(event){\n    this.setState(\n      {newUserName: event.target.value}\n    );\n  }\n\n  doChangeNewUserName(event){\n    this.setState(\n      {newUserName: event.target.value}\n    );\n  }\n\n  doChangeNewUserIcon(event){\n    this.setState(\n      {newUserIcon: event.target.value}\n    );\n  }\n  \n  doChangeNewUserColor(event){\n    this.setState(\n      {newUserColor: event.target.value}\n    );\n  }\n\n  fromDateToDateString(date){\n    let output = date.getFullYear() + '-';\n    let m = date.getMonth();\n    if(m < 9){\n      output += '0'\n    }\n    output += (m + 1) + '-';\n    let d = date.getDate();\n    if(d < 10){\n      output += '0'\n    }\n    output += d;\n    return output;\n  }\n\n  today(){\n    return(this.fromDateToDateString(new Date()));\n  }\n\n  render() {\n    const units = this.state.units.slice();\n    const cc = this.state.colors.slice();\n    const colors = cc.map(\n        (n) => {\n          let inlineStyles={backgroundColor: n};\n          return (<option style={inlineStyles} key={n} value={n}>{n}</option>);\n        });\n    let selectColorsStyle={\n      backgroundColor: this.state.newUserColor\n    };\n    let selectColors = <select style={selectColorsStyle} onChange={this.doChangeNewUserColor} value={this.state.newUserColor}>\n        {colors}\n    </select>\n    const ii = this.state.icons.slice();\n    const icons = ii.map((n) => <option key={n} value={n}>{n}</option>);\n    let selectIcons = <select onChange={this.doChangeNewUserIcon} value={this.state.newUserIcon}>\n        {icons}\n    </select>\n\n      \n      // persons\n      let personsHtml = null;\n      let medsHtml = null;\n      if(this.state.persons){\n        const pp = this.state.persons.slice();\n        personsHtml = pp.map((p) =>{\n            let style = { backgroundColor: p.color };\n            // person drug list\n            let meds = this.state.meds.slice();\n            medsHtml = meds.map(\n              (m) => {\n                if(m.personId === p.id){\n                  return (<div key={m.id}>\n                    <p>mid: {m.id}</p>\n                    <p>name: {m.name}</p>\n                    <p>days left: {m.daysLeft}</p>\n                    <p>until: {m.until}</p>\n                  </div>);\n                }else{\n                  return (undefined);\n                }\n              });\n            return (\n              <div key={p.id} className=\"pharma-person\" style={style}>\n                <h1>{p.icon}{p.name}</h1>\n                <p><i>id={p.id}</i></p>\n                <h4><span role=\"img\" aria-label=\"Medicine\">💊</span>Drug</h4>\n                <p>\n                  name: <input id={'newMedName_' + p.id} type=\"text\"></input>\n                  units: <select defaultValue={\"tablet(s)\"} id={'newMedUnits_' + p.id}>\n                      <option value=\"tablet(s)\">tablet(s)</option>\n                      <option value=\"ml\">ml</option>\n                      <option value=\"floz\">fl oz</option>\n                    </select> \n                  strength: <input id={'newMedStrength_' + p.id} type=\"text\"></input>\n                  dose: <input id={'newMedDose_' + p.id} type=\"text\"></input>\n                  every \n                    <select defaultValue={\"1\"} id={'newMedEveryNDays_' + p.id}>\n                      <option value=\"1\">1</option>\n                      <option value=\"1\">2</option>\n                      <option value=\"1\">3</option>\n                      <option value=\"1\">4</option>\n                      <option value=\"1\">5</option>\n                      <option value=\"1\">6</option>\n                      <option value=\"1\">7</option>\n                    </select> days \n                  stock level: <input id={'newMedStock_' + p.id} type=\"text\"></input>\n                  <button className=\"pharma-btn pharma-btn-add\" \n                    onClick={\n                      () => {\n                        let newDrugName = '??';\n                        let elem = document.getElementById('newMedName_' + p.id);\n                        if(elem){\n                          newDrugName = elem.value;\n                          this.doAddNewMed(p.id, newDrugName);\n                        }\n                      }\n                    }\n                      >Add</button>\n                </p>\n                <p>{this.today()}</p>\n                {medsHtml}\n              </div>\n            );\n        });\n      }\n      \n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <div className=\"App-header-div\">\n            <div className=\"App-header-div-logo\"><img src={logo} className=\"App-logo\" alt=\"logo\" /></div>\n            <div className=\"App-header-div-title\"><h1>Pharma</h1></div>\n          </div>\n        </header>\n        <section className=\"AppSection\">\n            <h3><span role=\"img\" aria-label=\"People\">👥</span>People</h3>\n            <div>\n              <p>\n                  initials: <input type=\"text\" size=\"5\" maxLength=\"5\" value={this.state.newUserName} onChange={this.doChangeNewUserName} />\n                  color: {selectColors}\n                  icon: {selectIcons}\n                  <button className=\"pharma-btn pharma-btn-add\" onClick={this.doAddNewUser}>Add</button>\n              </p>\n              {personsHtml}\n            </div>\n            <hr></hr>\n            <h3><span role=\"img\" aria-label=\"Medicine\">💊</span>Drug</h3>\n            <Drug units={units}></Drug>\n          </section>\n          <footer className=\"App-footer\">\n            <div className=\"App-footer-div\">\n              <div className=\"App-footer-version\"><p className=\"App-footer-version\">Version: <span className=\"App-footer-version\">{this.state.version}</span></p></div>\n              <div className=\"App-footer-copyright\"><p className=\"App-footer-copyright\">&copy; 2019 molorosh</p></div>\n            </div>\n          </footer>\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}