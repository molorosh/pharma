{"version":3,"sources":["db.js","EditPerson.js","AppDal.js","EditMedicine.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["db","Dexie","version","stores","persons","meds","EditPerson","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChangeName","event","setState","newUserName","target","value","doChangeNewUserName","doChangeNewUserIcon","newUserIcon","doChangeNewUserColor","newUserColor","doAttemptAddNewUser","n","state","c","i","errUserName","undefined","errorTally","isEmptyOrSpaces","callbackPersonAdd","personId","colors","icons","_this2","table","get","then","person","name","str","match","_this3","classFullname","title","content","otherButtons","slice","map","inlineStyles","backgroundColor","react_default","a","createElement","style","key","selectColorsStyle","selectColors","onChange","selectIcons","Fragment","className","type","size","maxLength","onClick","mode","callbackPersonDelete","onCancel","Component","dal","fromDateToDateString","date","output","getFullYear","m","getMonth","d","getDate","today","Date","restockMedication","medicineId","txtRestock","errors","lvl","push","msg","parseInt","toString","length","changes","stockDate","stockAmount","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","where","equals","modify","stop","mustBeSomething","strText","ret","isValid","isSomething","mustBePositiveInteger","intText","addMedication","dose","strength","everyNdays","units","restockValidation","nameValidation","doseValidation","strengthValidation","med","scheduleAmount","_callee2","_context2","add","deleteMedication","delete","EditMedecine","doChange_stockAmount","doChange_name","doChange_units","doChange_strength","doChange_stockDate","doChange_scheduleAmount","doChange_everyNdays","clearErrors","err_stockAmount","err_everyNdays","err_name","err_scheduleAmount","err_stockDate","err_strength","err_units","showErrors","x","xMax","processRestock","onRestock","processDelete","onDelete","processAdd","console","log","onAdd","unitList","dayList","that","actionButtons","mainContent","strengthText","med_strength","medDescription","med_name","unitOptions","daysOptions","App","doEditMedicine","control","doDeleteMedicine","doRestockMedicine","doCancelEdit","doEditUser","doDeleteUser","fetchOnlyUsers","toArray","fetchOnlyMeds","doMedsCalculations","fetchAllData","days","dayFrom","parse","now","UTC","getUTCFullYear","getUTCMonth","getUTCDate","until","valueOf","setDate","timeDiff","getTime","dayDiff","Math","ceil","daysLeft","callbackMedicineDelete","callbackMedicineRestock","callbackMedicineAdd","id","assertThisInitialized","icon","color","editControl","src_EditPerson","EditMedicine","src","logo","alt","personsHtml","medsHtml","p","role","aria-label","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__"],"mappings":"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","file":"static/js/main.4b563095.chunk.js","sourcesContent":["import Dexie from 'dexie';\n\n// for examples of using Dexie with React.js:\n// q.v. https://github.com/dfahlander/Dexie.js/blob/master/samples/react/src/db.js\n\nconst db = new Dexie('MoloroshPharmaDB');\n// needs to keep the older schemas so Dexie can \n// upgrade from the older version to the newer version\ndb.version(1).stores(\n    { \n        persons: '++id' \n    });\n// the latest version of the database schema\ndb.version(2).stores(\n    { \n        persons: '++id',\n        meds: '++id,personId' \n    });\n\nexport default db;\n\n// persons:\n//   ++id\n//   icon\n//   color\n//   name\n\n// meds\n//   ++id (1)\n//   personid (2)\n//   name (\"aspirin\")\n//   strength (\"500mg\")\n//   units (\"tablets\" of \"tablets\"/\"ml\")\n//   stockDate (\"2018-01-23\")\n//   stockAmount (23) \n//   scheduleAmount (2)\n//   everyNDays (1)\n//   predictedLastFullDoseDate (\"2018-05-01\")\n\n","import React, { Component } from 'react';\nimport db from './db';\n\nclass EditPerson extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            personId: props.personId,\n            newUserName: '',\n            newUserColor: \"Pink\",\n            newUserIcon: \"۝\",\n            errUserName: undefined,\n            colors: [\"Pink\",\"Orchid\",\"Salmon\",\"Orange\",\"Khaki\",\"Gainsboro\"],\n            icons: [\"۝\",\"۞\",\"⊜\",\"⊞\",\"⊙\",\"⊗\"],\n        };\n    }\n\n    // this is called before the \"render() method\n    componentDidMount() {\n        if(this.state.personId){\n            db.table('persons')\n                .get(this.state.personId)\n                .then((person) => {\n                    this.setState( { newUserName: person.name } )\n                });\n        }\n    }\n\n    isEmptyOrSpaces(str){\n        return str === null || str === undefined || str.match(/^ *$/) !== null;\n    }\n    \n    isSomething(str){\n        return !this.isEmptyOrSpaces(str);\n    }\n\n    handleChangeName = (event) => {\n        this.setState(\n            {newUserName: event.target.value}\n        );\n    }\n    \n    doChangeNewUserName = (event) => {\n        this.setState(\n            {newUserName: event.target.value}\n        );\n    }\n    \n    doChangeNewUserIcon = (event) => {\n        this.setState(\n            {newUserIcon: event.target.value}\n        );\n    }\n      \n    doChangeNewUserColor = (event) => {\n        this.setState(\n            {newUserColor: event.target.value}\n        );\n    }\n\n    doAttemptAddNewUser = () => {\n        const n = this.state.newUserName;\n        const c = this.state.newUserColor;\n        const i = this.state.newUserIcon;\n        let errUserName = undefined;\n        let errorTally = 0;\n        if(this.isEmptyOrSpaces(n)){\n            errUserName = \"Please enter a username\";\n            errorTally++;\n        }\n        this.setState(\n            {\n                errUserName\n            },\n            () => {\n                if(errorTally === 0){\n                    this.props.callbackPersonAdd(n, i, c);\n                }\n            }\n        );\n    }\n\n    render(){\n        let classFullname = \"pharma-person-control\";\n        let title = \"\";\n        let content = undefined;\n        let otherButtons = undefined;\n        if(this.props.personId === undefined){\n            classFullname += \" pharma-person-add\"\n            title = \"Add New Person\";\n            const cc = this.state.colors.slice();\n            const colors = cc.map(\n                (n) => {\n                let inlineStyles={backgroundColor: n};\n                return (<option style={inlineStyles} key={n} value={n}>{n}</option>);\n                });\n            let selectColorsStyle={\n            backgroundColor: this.state.newUserColor\n            };\n            let selectColors = <select style={selectColorsStyle} onChange={this.doChangeNewUserColor} value={this.state.newUserColor}>\n                {colors}\n            </select>\n            const ii = this.state.icons.slice();\n            const icons = ii.map((n) => <option key={n} value={n}>{n}</option>);\n            let selectIcons = <select onChange={this.doChangeNewUserIcon} value={this.state.newUserIcon}>\n                {icons}\n            </select>\n            content = (\n                <>\n                    <table className=\"pharma-edit-layout\">\n                        <tbody>\n                            <tr>\n                                <td className=\"pharma-edit-layout-label\">\n                                    initials:\n                                </td>\n                                <td className=\"pharma-edit-layout-control\">\n                                    <input type=\"text\" size=\"5\" maxLength=\"5\" value={this.state.newUserName} onChange={this.doChangeNewUserName} />\n                                </td>\n                                <td className=\"pharma-edit-layout-error\">\n                                    {this.state.errUserName}\n                                </td>\n                            </tr>\n                            <tr>\n                                <td className=\"pharma-edit-layout-label\">\n                                    color:\n                                </td>\n                                <td className=\"pharma-edit-layout-control\">\n                                    {selectColors}\n                                </td>\n                                <td className=\"pharma-edit-layout-error\">\n\n                                </td>\n                            </tr>\n                            <tr>\n                                <td className=\"pharma-edit-layout-label\">\n                                    icons:\n                                </td>\n                                <td className=\"pharma-edit-layout-control\">\n                                    {selectIcons}\n                                </td>\n                                <td className=\"pharma-edit-layout-error\">\n                                    \n                                </td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </>\n            );\n            otherButtons = (<button \n                onClick={this.doAttemptAddNewUser} \n                className=\"pharma-btn pharma-btn-add\"\n                >\n                Add New Person\n            </button>);\n        }else if(this.props.mode === \"delete\"){\n            classFullname += \" pharma-person-delete\"\n            title = \"Delete Person and Medicines\"\n            content = (\n                <>\n                    <p>person to delete: <strong>{this.state.newUserName}</strong></p>\n                </>\n            );\n            otherButtons = (<button \n                onClick={\n                    () => {\n                        this.props.callbackPersonDelete(this.state.personId);\n                    }\n                }\n                className=\"pharma-btn pharma-btn-delete\"\n                >\n                Delete [{this.state.newUserName}]\n            </button>);\n        }else{\n            classFullname += \" pharma-person-edit\"\n            title = \"Edit Person\";\n        }\n        return (\n            <div className={classFullname}>\n                <h3><code>{title}</code></h3>\n                {content}\n                <p>\n                    <button \n                        onClick={this.props.onCancel} \n                        className=\"pharma-btn pharma-btn-cancel\"\n                        >\n                        Cancel\n                    </button>\n                    {otherButtons}\n                </p>\n            </div>\n        );\n    }\n}\n\nexport default EditPerson;","import db from './db';\n// TODO - at some point should split this into a Business Logic Layer\n// and a (hidden) Data Access Layer\nclass AppDal {\n    \n    isEmptyOrSpaces(str){\n        return str === null || str === undefined || str.match(/^ *$/) !== null;\n    }\n    \n    isSomething(str){\n        return !this.isEmptyOrSpaces(str);\n    }\n    \n    fromDateToDateString = (date) => {\n        let output = date.getFullYear() + '-';\n        let m = date.getMonth();\n        if(m < 9){\n            output += '0'\n        }\n        output += (m + 1) + '-';\n        let d = date.getDate();\n        if(d < 10){\n            output += '0'\n        }\n        output += d;\n        return output;\n    }\n\n    today = () => {\n        return(this.fromDateToDateString(new Date()));\n    }\n\n    restockMedication = (medicineId, txtRestock) => {\n        let errors = [];\n        let lvl = undefined;\n        if(this.isEmptyOrSpaces(txtRestock)){\n            errors.push({name: \"err_stockAmount\", msg: \"You must supply a restock level\" });\n        }else{\n            lvl = parseInt(txtRestock, 10);\n            if(lvl && lvl.toString && lvl.toString() === txtRestock){\n                if(lvl < 1){\n                    errors.push({name: \"err_stockAmount\", msg: \"Restock level must be more than zero\" });\n                }\n            }else{\n                errors.push({name: \"err_stockAmount\", msg: \"You must supply a valid restock level\" });\n            }\n        }\n        if(errors.length === 0){\n            // do the update\n            let changes = {\n                stockDate: this.today(),\n                stockAmount: lvl\n            };\n            (async () => {\n                await db.table(\"meds\")\n                    .where(\":id\")\n                    .equals(medicineId)\n                    .modify(changes);\n            })();\n        }\n        return errors;\n    }\n\n    mustBeSomething = (strText, name) => {\n        let ret = { \n            isValid: false,\n            value: undefined,\n            msg: undefined\n        }\n        if(!this.isSomething(strText)){\n            ret.msg = \"You must supply a \" + name;\n        }else{\n            ret.isValid = true;\n            ret.value = strText;\n        }\n        return ret;\n    }\n\n    mustBePositiveInteger = (intText, name) => {\n        let ret = { \n            isValid: false,\n            value: undefined,\n            msg: undefined\n        }\n        let lvl = undefined;\n        if(this.isEmptyOrSpaces(intText)){\n            ret.msg = \"You must supply a \" + name;\n        }else{\n            lvl = parseInt(intText, 10);\n            if(lvl && lvl.toString && lvl.toString() === intText){\n                if(lvl < 1){\n                    ret.msg = name + \" must be more than zero\";\n                }\n                else{\n                    ret.isValid = true;\n                    ret.value = lvl;\n                }\n            }else{\n                ret.msg = \"You must supply a valid \" + name;\n            }\n        }\n        return ret;\n    }\n\n    addMedication = (\n        personId, \n        name,\n        stockAmount,\n        dose,\n        strength,\n        everyNdays,\n        units\n        ) => {\n        let errors = [];\n        let restockValidation = this.mustBePositiveInteger(stockAmount, \"Stock Amount\");\n        if(!restockValidation.isValid){\n            errors.push({name: \"err_stockAmount\", msg: restockValidation.msg });\n        }\n        let nameValidation = this.mustBeSomething(name, \"Medicine Name\");\n        if(!nameValidation.isValid){\n            errors.push({name: \"err_name\", msg: nameValidation.msg});\n        }\n        let doseValidation = this.mustBePositiveInteger(dose, \"Dose\");\n        if(!doseValidation.isValid){\n            errors.push({name: \"err_scheduleAmount\", msg: doseValidation.msg });\n        }\n        let strengthValidation = this.mustBeSomething(strength, \"Strength\");\n        if(!strengthValidation.isValid){\n            errors.push({name: \"err_strength\", msg: strengthValidation.msg});\n        }\n        if(errors.length === 0){\n            const med = {\n                personId: personId,\n                name: nameValidation.value,\n                strength: strengthValidation.value,\n                units: units,\n                stockDate: this.today(),\n                stockAmount: restockValidation.value,\n                scheduleAmount: doseValidation.value,\n                everyNdays: everyNdays\n              };\n              (async () => {\n                db.table('meds')\n                    .add(med);\n              })();\n        }\n        return errors;\n    }\n\n    deleteMedication = (medicineId) => {\n        let errors = [];\n        db.table(\"meds\")\n            .where(\"id\")\n            .equals(medicineId)\n            .delete();\n        return errors;\n    }\n\n}\n\nconst dal = new AppDal();\n\nexport default dal;","import React, { Component } from 'react';\nimport db from './db';\nimport dal from './AppDal';\n\nclass EditMedecine extends Component {\n\n    constructor(props){\n        super(props);\n        this.state = {\n            unitList: [\"tablets(s)\",\"ml\"],\n            dayList: [\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\"],\n            personId: props.personId,\n            medicineId: props.medicineId,\n            name: '',\n            strength: '',\n            stockDate: '',\n            units: '',\n            stockAmount: '',\n            scheduleAmount: '',\n            everyNdays: '',\n            err_name: '',\n            err_strength: '',\n            err_stockDate: '',\n            err_units: '',\n            err_stockAmount: '',\n            err_scheduleAmount: '',\n            err_everyNdays: '',\n        };\n    }\n\n    isEmptyOrSpaces(str){\n        return str === null || str === undefined || str.match(/^ *$/) !== null;\n    }\n    \n    isSomething(str){\n        return !this.isEmptyOrSpaces(str);\n    }\n\n    componentDidMount(){\n        if(this.state.medicineId && this.state.medicineId > 0){\n            let that = this;\n            db.table(\"meds\").get(this.state.medicineId)\n            .then(function(med){\n                that.setState({\n                    name: med.name,\n                    strength: med.strength,\n                    units: med.units,\n                    stockDate: med.stockDate,\n                    stockAmount: (that.props.mode === \"restock\") ? '' : med.stockAmount,\n                    scheduleAmount: med.scheduleAmount,\n                    everyNdays: med.everyNdays\n                });\n            });\n        }else{\n            this.setState({\n                units: this.state.unitList[0],\n                everyNdays: this.state.dayList[0]\n            });\n        }\n    }\n\n    doChange_stockAmount = (event) => {\n        this.setState(\n            {stockAmount: event.target.value}\n        );\n    }\n\n    doChange_name = (event) => {\n        this.setState(\n            {name: event.target.value}\n        );\n    }\n    \n    doChange_units = (event) => {\n        this.setState(\n            {units: event.target.value}\n        );\n    }\n    \n    doChange_strength = (event) => {\n        this.setState(\n            {strength: event.target.value}\n        );\n    }\n\n    doChange_stockDate = (event) => {\n        this.setState(\n            {stockDate: event.target.value}\n        );\n    }\n\n    doChange_scheduleAmount = (event) => {\n        this.setState(\n            {scheduleAmount: event.target.value}\n        );\n    }\n\n    doChange_everyNdays = (event) => {\n        this.setState(\n            {everyNdays: event.target.value}\n        );\n    }\n\n    clearErrors = () => {\n        this.setState({\n            err_stockAmount: '',\n            err_everyNdays: '',\n            err_name: '',\n            err_scheduleAmount: '',\n            err_stockDate: '',\n            err_strength: '',\n            err_units: ''\n        });\n    }\n\n    showErrors = (errors) => {\n        if(errors && errors.length){\n            let changes = {};\n            for(let x = 0, xMax = errors.length; x < xMax; x++){\n                changes[errors[x].name] = errors[x].msg;\n            }\n            this.setState(changes);\n        }\n    }\n\n    processRestock = () => {\n        this.clearErrors();\n        let errors = dal.restockMedication(this.state.medicineId, this.state.stockAmount);\n        if(errors.length === 0){\n            this.props.onRestock();\n        }else{\n            this.showErrors(errors);\n        }\n    }\n\n    processDelete = () => {\n        this.clearErrors();\n        let errors = dal.deleteMedication(this.state.medicineId);\n        if(errors.length === 0){\n            this.props.onDelete();\n        }else{\n            this.showErrors(errors);\n        }\n    }\n\n    processAdd = () => {\n        this.clearErrors();\n        let errors = dal.addMedication(\n                this.state.personId,\n                this.state.name,\n                this.state.stockAmount,\n                this.state.scheduleAmount,\n                this.state.strength,\n                this.state.everyNdays,\n                this.state.units\n            );\n        console.log(errors);\n        if(errors.length === 0){\n            this.props.onAdd();\n        }else{\n            this.showErrors(errors);\n        }\n    }\n\n    render(){\n        let classFullname = \"pharma-medicine-control\";\n        let title = \"\";\n        let actionButtons = <></>;\n        let mainContent = <></>;\n        let strengthText = (<></>);\n        if(this.isSomething(this.state.med_strength)){\n          strengthText = (<em>({this.state.med_strength})</em>);\n        }\n        let medDescription = <p><strong>{this.state.med_name}</strong> {strengthText}</p>;\n        if(this.props.medicineId === undefined){\n            classFullname += \" pharma-medicine-add\"\n            title = \"Add New Medicine\";\n            actionButtons = (<>\n                <button \n                    onClick={this.processAdd} \n                    className=\"pharma-btn pharma-btn-add\"\n                >\n                    Add\n                </button>\n            </>);\n            const units = this.state.unitList.slice();\n            const unitOptions = units.map(\n            (a) => {\n                return (<option key={a} value={a}>{a}</option>)\n            }\n            );\n            const days = this.state.dayList.slice();\n            const daysOptions = days.map(\n                (a) => {\n                    return (<option key={a} value={a}>{a}</option>)\n                }\n            );\n            mainContent = (<>\n                <table className=\"pharma-edit-layout\">\n                    <tbody>\n                        <tr>\n                            <td className=\"pharma-edit-layout-label\">\n                                name:\n                            </td>\n                            <td className=\"pharma-edit-layout-control\">\n                                <input type=\"text\" value={this.state.name} onChange={this.doChange_name} />\n                            </td>\n                            <td className=\"pharma-edit-layout-error\">\n                                {this.state.err_name}\n                            </td>\n                        </tr>\n                        <tr>\n                            <td className=\"pharma-edit-layout-label\">\n                                units:\n                            </td>\n                            <td className=\"pharma-edit-layout-control\">\n                                <select onChange={this.doChange_units} value={this.state.units}>\n                                    {unitOptions}\n                                </select>\n                            </td>\n                            <td className=\"pharma-edit-layout-error\">\n                                {this.state.err_units}\n                            </td>\n                        </tr>\n                        <tr>\n                            <td className=\"pharma-edit-layout-label\">\n                                strength:\n                            </td>\n                            <td className=\"pharma-edit-layout-control\">\n                                <input type=\"text\" value={this.state.strength} onChange={this.doChange_strength} />\n                            </td>\n                            <td className=\"pharma-edit-layout-error\">\n                                {this.state.err_strength}\n                            </td>\n                        </tr>\n                        <tr>\n                            <td className=\"pharma-edit-layout-label\">\n                                dose:\n                            </td>\n                            <td className=\"pharma-edit-layout-control\">\n                                <input type=\"text\" value={this.state.scheduleAmount} onChange={this.doChange_scheduleAmount} />\n                            </td>\n                            <td className=\"pharma-edit-layout-error\">\n                                {this.state.err_scheduleAmount}\n                            </td>\n                        </tr>\n                        <tr>\n                            <td className=\"pharma-edit-layout-label\">\n                                every\n                            </td>\n                            <td className=\"pharma-edit-layout-control\">\n                                <select onChange={this.doChange_everyNdays} value={this.state.everyNdays} >\n                                    {daysOptions}\n                                </select>\n                                &nbsp; days\n                            </td>\n                            <td className=\"pharma-edit-layout-error\">\n                                {this.state.err_everyNdays}\n                            </td>\n                        </tr>\n                        <tr>\n                            <td className=\"pharma-edit-layout-label\">\n                                stock level:\n                            </td>\n                            <td className=\"pharma-edit-layout-control\">\n                                <input type=\"text\" size=\"5\" maxLength=\"5\" value={this.state.stockAmount} onChange={this.doChange_stockAmount} />\n                            </td>\n                            <td className=\"pharma-edit-layout-error\">\n                                {this.state.err_stockAmount}\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>  \n                <p>\n                    {this.state.name}\n                    |{this.state.strength}\n                    |{this.state.stockDate}\n                    |{this.state.units}\n                    |{this.state.stockAmount}\n                    |{this.state.scheduleAmount}\n                    |{this.state.scheduleAmount}\n                    |{this.state.everyNdays}\n                </p>        \n            </>);\n        }else if(this.props.mode === \"delete\"){\n            classFullname += \" pharma-medicine-delete\";\n            title = \"Delete Medicine\";\n            mainContent = (<>\n                <p>You have chosen to delete the following medication:</p>\n                {medDescription}\n                <p>{this.state.scheduleAmount} {this.state.units} every {this.state.scheduleAmount} days</p>\n            </>);\n            actionButtons = (<>\n                <button \n                    onClick={this.processDelete} \n                    className=\"pharma-btn pharma-btn-delete\"\n                >\n                    Delete\n                </button>\n            </>);\n        }else if(this.props.mode === \"restock\"){\n            classFullname += \" pharma-medicine-restock\"\n            title = \"Restock Medicine\"\n            mainContent = (<>\n                <p>You have chosen to restock the following medication:</p>\n                {medDescription}\n                <p>{this.state.scheduleAmount} {this.state.units} every {this.state.scheduleAmount} days</p>\n                <p>Please enter the stock level at the <u>start</u> of <u>today</u></p>\n                <table className=\"pharma-edit-layout\">\n                    <tbody>\n                        <tr>\n                            <td className=\"pharma-edit-layout-label\">\n                                Stock amount:\n                            </td>\n                            <td className=\"pharma-edit-layout-control\">\n                                <input type=\"text\" size=\"5\" maxLength=\"5\" value={this.state.stockAmount} onChange={this.doChange_stockAmount} />\n                            </td>\n                            <td className=\"pharma-edit-layout-error\">\n                                {this.state.err_stockAmount}\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>          \n            </>);\n            actionButtons = (<>\n                <button \n                    onClick={this.processRestock} \n                    className=\"pharma-btn pharma-btn-restock\"\n                >\n                    Restock\n                </button>\n            </>);\n        }else{\n            title = \"Edit Medicine\";\n            classFullname += \" pharma-medicine-edit\"\n        }\n        return (\n            <div className={classFullname}>\n                <h3><code>{title}</code></h3>\n                {mainContent}\n                <p>\n                    <button \n                        onClick={this.props.onCancel} \n                        className=\"pharma-btn pharma-btn-cancel\"\n                        >\n                        Cancel\n                    </button>\n                    {actionButtons}\n                </p>\n            </div>\n        );\n    }\n}\n\nexport default EditMedecine;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport db from './db';\nimport './App.css';\nimport EditPerson from './EditPerson';\nimport EditMedicine from './EditMedicine';\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n        units: [\"tablets(s)\",\"ml\"],\n        // mode: 'list','edit','delete','add','restock'\n        mode: 'list',\n        // control: 'undefined', 'person', 'medicine'\n        control: undefined,\n        // personId: the primary key of the person to be added, edited or deleted\n        personId: undefined,\n        // medicineId: the primary key of the medicine to be added, edited or deleted\n        medicineId: undefined,\n        version: \"0.6.0.0\",\n        meds: [],\n    }\n  }\n\n  // this is called before the \"render() method\n  componentDidMount() {\n    this.fetchAllData();\n  }\n\n  isEmptyOrSpaces(str){\n    return str === null || str === undefined || str.match(/^ *$/) !== null;\n  }\n\n  isSomething(str){\n      return !this.isEmptyOrSpaces(str);\n  }\n\n  doEditMedicine = (personId, medicineId) => {\n    this.setState(\n      {\n        mode: 'edit',\n        personId: personId,\n        medicineId: medicineId,\n        control: 'medicine'\n      }\n    );\n  }\n\n  doDeleteMedicine = (personId, medicineId) => {\n    console.log(\"doDeleteMedicine(\" + personId + \",\" + medicineId + \")\");\n    this.setState(\n      {\n        mode: 'delete',\n        personId: personId,\n        medicineId: medicineId,\n        control: 'medicine'\n      }\n    );\n  }\n\n  doRestockMedicine = (personId, medicineId) => {\n    console.log(\"doRestockMedicine(\" + personId + \",\" + medicineId + \")\");\n    this.setState(\n      {\n        mode: 'restock',\n        personId: personId,\n        medicineId: medicineId,\n        control: 'medicine'\n      }\n    );\n  }\n\n  doCancelEdit = () => {\n    this.setState(\n      {\n        mode: 'list',\n        personId: undefined,\n        medicineId: undefined,\n        control: undefined\n      }\n    );\n  }\n\n  doEditUser = (personId) => {\n    this.setState(\n      {\n        mode: 'edit',\n        personId: personId,\n        medicineId: undefined,\n        control: 'person'\n      }\n    );\n  }\n\n  doDeleteUser = (personId) => {\n    this.setState(\n      {\n        mode: 'delete',\n        personId: personId,\n        medicineId: undefined,\n        control: 'person'\n      }\n    );\n  }\n\n  fetchOnlyUsers = () => {\n    db.table('persons')\n      .toArray()\n      .then((persons) => {\n        this.setState( { persons } )\n      });\n  }\n\n  fetchOnlyMeds = () => {\n    db.table('meds')\n      .toArray()\n      .then((meds) => {\n        if(meds && meds.length){\n          for(let x = 0, xMax = meds.length; x < xMax; x++){\n            this.doMedsCalculations(meds[x]);\n          }\n        }\n        this.setState( { meds } )\n      });\n  }\n\n  fetchAllData = () => {\n    // although this works, it should be \n    // re-written to use Dexie \"all\" promise API\n    // so we only update the React state once at the end\n    db.table('persons')\n      .toArray()\n      .then((persons) => {\n        this.setState( { persons, mode: 'list' }, this.fetchOnlyMeds() )\n      });\n  }\n\n  doMedsCalculations = (med) => {\n    let doses = med.stockAmount / med.scheduleAmount; \n    let days = doses * med.everyNdays;\n    let dayFrom = new Date(Date.parse(med.stockDate + \"T00:00:00Z\"));\n    let now = new Date();\n    let today = new Date(Date.UTC(now.getUTCFullYear(), now.getUTCMonth(), now.getUTCDate() ));\n    let until = new Date(dayFrom.valueOf());\n    until.setDate(until.getDate() + days);\n    let timeDiff = (until.getTime() - today.getTime());\n    let dayDiff = Math.ceil(timeDiff / (1000 * 3600 * 24));\n    med.daysLeft = dayDiff;\n    med.until = this.fromDateToDateString(until);\n  }\n\n  callbackMedicineDelete = () => {\n    this.fetchAllData();\n  }\n\n  callbackMedicineRestock = () => {\n    this.fetchAllData();\n  }\n\n  callbackMedicineAdd = () => {\n    this.fetchAllData();\n  }\n\n  callbackPersonDelete = (id) => {\n    // delete the medicines, then the person\n    let that = this;\n    db.table('meds')\n      .where('personId')\n      .equals(id)\n      .delete()\n      .then(function(){\n        db.table('persons').where('id')\n        .equals(id)\n        .delete()\n        .then(function(){\n          that.setState(\n            {\n              mode: 'list',\n              personId: undefined,\n              medicineId: undefined,\n              control: undefined\n            }, \n            () => { that.fetchAllData(); });\n        })\n      })\n  }\n\n  callbackPersonAdd = (name,icon,color) => {\n    const person = {\n      name: name,\n      icon: icon,\n      color: color\n    };\n    db.table('persons')\n      .add(person)\n      .then(this.fetchAllData());\n  }\n\n  handleChangeName = (event) => {\n    this.setState(\n      {newUserName: event.target.value}\n    );\n  }\n\n  doChangeNewUserName = (event) => {\n    this.setState(\n      {newUserName: event.target.value}\n    );\n  }\n\n  doChangeNewUserIcon = (event) => {\n    this.setState(\n      {newUserIcon: event.target.value}\n    );\n  }\n  \n  doChangeNewUserColor = (event) => {\n    this.setState(\n      {newUserColor: event.target.value}\n    );\n  }\n\n  fromDateToDateString = (date) => {\n    let output = date.getFullYear() + '-';\n    let m = date.getMonth();\n    if(m < 9){\n      output += '0'\n    }\n    output += (m + 1) + '-';\n    let d = date.getDate();\n    if(d < 10){\n      output += '0'\n    }\n    output += d;\n    return output;\n  }\n\n  today = () => {\n    return(this.fromDateToDateString(new Date()));\n  }\n\n  render() {\n    if(this.state.mode !== \"list\" && this.state.control){\n      let editControl = undefined;\n      if(this.state.control === \"person\"){\n        editControl = (\n          <EditPerson\n           onCancel={this.doCancelEdit} \n            mode={this.state.mode} \n            personId={this.state.personId}\n            callbackPersonAdd={this.callbackPersonAdd}\n            callbackPersonDelete={this.callbackPersonDelete}\n            >\n          </EditPerson>\n        );\n      }else if(this.state.control === \"medicine\"){\n        editControl = (\n          <EditMedicine\n            onCancel={this.doCancelEdit} \n            onDelete={this.callbackMedicineDelete}\n            onRestock={this.callbackMedicineDelete}\n            onAdd={this.callbackMedicineAdd}\n            mode={this.state.mode} \n            personId={this.state.personId}\n            medicineId={this.state.medicineId}\n            >\n          </EditMedicine>\n        );\n      }\n      return (\n        <div className=\"App\">\n        <header className=\"App-header\">\n          <div className=\"App-header-div\">\n            <div className=\"App-header-div-logo\"><img src={logo} className=\"App-logo\" alt=\"logo\" /></div>\n            <div className=\"App-header-div-title\"><h1>Pharma</h1></div>\n          </div>\n        </header>\n        <section className=\"AppSection\">\n          {editControl}\n        </section>\n        <footer className=\"App-footer\">\n            <div className=\"App-footer-div\">\n              <div className=\"App-footer-version\"><p className=\"App-footer-version\">Version: <span className=\"App-footer-version\">{this.state.version}</span></p></div>\n              <div className=\"App-footer-copyright\"><p className=\"App-footer-copyright\">&copy; 2019 molorosh</p></div>\n            </div>\n          </footer>\n      </div>    \n      );\n    }\n\n      // persons\n      let personsHtml = null;\n      let medsHtml = null;\n      if(this.state.persons){\n        const pp = this.state.persons.slice();\n        personsHtml = pp.map((p) =>{\n            let style = { backgroundColor: p.color };\n            // person drug list\n            let meds = this.state.meds.slice();\n            medsHtml = meds.map(\n              (m) => {\n                if(m.personId === p.id){\n                  let strengthText = (<></>);\n                  if(this.isSomething(m.strength)){\n                    strengthText = (<em>({m.strength})</em>);\n                  }\n                  return (\n                    <div className=\"pharma-person-medicine\" key={m.id}>\n                      <p className=\"pharma-person-medicine-edit\">\n                        {\n                          /*\n                          <button \n                          onClick={() => {\n                            this.doEditMedicine(p.id, m.id);\n                          }} \n                          className=\"pharma-btn pharma-btn-edit\"\n                          >\n                            Edit Medicine\n                          </button>\n                          <br/>\n                          */\n                        }\n                        <button \n                          onClick={() => {\n                            this.doRestockMedicine(p.id, m.id);\n                          }} \n                          className=\"pharma-btn pharma-btn-restock\"\n                          >\n                            Restock Medicine\n                        </button>\n                        <br/>\n                        <button \n                          onClick={() => {\n                            this.doDeleteMedicine(p.id, m.id);\n                          }} \n                          className=\"pharma-btn pharma-btn-delete\"\n                          >\n                            Delete Medicine\n                        </button>\n                      </p>\n                      <p><strong>{m.name}</strong> {strengthText}</p>\n                      <p>{m.scheduleAmount} {m.units} every {m.everyNdays} day(s)</p>\n                      <p>days left: <strong>{m.daysLeft}</strong> <em>({m.until})</em></p>\n                    </div>\n                    );\n                }else{\n                  return (undefined);\n                }\n              });\n            return (\n              <div key={p.id} className=\"pharma-person\" style={style}>\n                <p className=\"pharma-delete-person-para\">\n                  <button\n                    onClick={\n                      () => {\n                        this.doDeleteUser(p.id);\n                      }\n                    } \n                    className=\"pharma-btn pharma-btn-delete\" >Delete Person</button>\n                </p>\n                <h1>{p.icon} {p.name}</h1>\n                <h4><span role=\"img\" aria-label=\"Medicine\">💊</span> Medicines</h4>\n                <p>\n                  <button \n                    onClick={() => {this.doEditMedicine(p.id, undefined);}} \n                    className=\"pharma-btn pharma-btn-add\">\n                      Add Medicine\n                    </button>\n                  </p>\n                {medsHtml}\n              </div>\n            );\n        });\n      }\n      \n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <div className=\"App-header-div\">\n            <div className=\"App-header-div-logo\"><img src={logo} className=\"App-logo\" alt=\"logo\" /></div>\n            <div className=\"App-header-div-title\"><h1>Pharma</h1></div>\n          </div>\n        </header>\n        <section className=\"AppSection\">\n            <h3><span role=\"img\" aria-label=\"People\">👥</span> People</h3>\n            <p>\n              <button className=\"pharma-btn pharma-btn-add\" onClick={() => { this.doEditUser(undefined) }}>New Person</button>\n            </p>\n            <div>\n              {personsHtml}\n            </div>\n          </section>\n          <footer className=\"App-footer\">\n            <div className=\"App-footer-div\">\n              <div className=\"App-footer-version\"><p className=\"App-footer-version\">Version: <span className=\"App-footer-version\">{this.state.version}</span></p></div>\n              <div className=\"App-footer-copyright\"><p className=\"App-footer-copyright\">&copy; 2019 molorosh</p></div>\n            </div>\n          </footer>\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.c695c8b2.svg\";"],"sourceRoot":""}