{"version":3,"sources":["db.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["db","Dexie","version","stores","persons","meds","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","units","colors","icons","newUserName","newUserColor","newUserIcon","handleChangeName","bind","assertThisInitialized","doChangeNewUserName","doChangeNewUserColor","doChangeNewUserIcon","doAddNewUser","fetchAllData","fetchOnlyUsers","fetchOnlyMeds","doAddNewMed","doMedsCalculations","str","match","_this2","table","toArray","then","setState","_this3","length","x","xMax","_this4","med","days","stockAmount","scheduleAmount","everyNdays","dayFrom","Date","parse","stockDate","now","today","UTC","getUTCFullYear","getUTCMonth","getUTCDate","until","valueOf","setDate","getDate","timeDiff","getTime","dayDiff","Math","ceil","daysLeft","fromDateToDateString","personId","medName","document","getElementById","value","medDose","medStrength","medStock","medEveryNDays","newMedUnits","isSomething","name","strength","add","n","c","i","isEmptyOrSpaces","person","icon","color","event","target","date","output","getFullYear","m","getMonth","d","_this5","unitOptions","slice","map","a","react_default","createElement","key","inlineStyles","backgroundColor","style","selectColorsStyle","selectColors","onChange","selectIcons","personsHtml","medsHtml","p","id","className","role","aria-label","type","defaultValue","size","maxLength","onClick","newDrugName","elem","src","logo","alt","Component","Boolean","window","location","hostname","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__"],"mappings":"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","file":"static/js/main.056ac442.chunk.js","sourcesContent":["import Dexie from 'dexie';\n\n// for examples of using Dexie with React.js:\n// q.v. https://github.com/dfahlander/Dexie.js/blob/master/samples/react/src/db.js\n\nconst db = new Dexie('MoloroshPharmaDB');\n// needs to keep the older schemas so Dexie can \n// upgrade from the older version to the newer version\ndb.version(1).stores(\n    { \n        persons: '++id' \n    });\n// the latest version of the database schema\ndb.version(2).stores(\n    { \n        persons: '++id',\n        meds: '++id,personId' \n    });\n\nexport default db;\n\n// persons:\n//   ++id\n//   icon\n//   color\n//   name\n\n// meds\n//   ++id (1)\n//   personid (2)\n//   name (\"aspirin\")\n//   strength (\"500mg\")\n//   units (\"tablets\" of \"tablets\"/\"ml\")\n//   stockDate (\"2018-01-23\")\n//   stockAmount (23) \n//   scheduleAmount (2)\n//   everyNDays (1)\n//   predictedLastFullDoseDate (\"2018-05-01\")\n\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport db from './db';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n        units: [\"tablets(s)\",\"ml\"],\n        colors: [\"Pink\",\"Orchid\",\"Salmon\",\"Orange\",\"Khaki\",\"Gainsboro\"],\n        icons: [\"۝\",\"۞\",\"⊜\",\"⊞\",\"⊙\",\"⊗\"],\n        newUserName: '',\n        newUserColor: \"Pink\",\n        newUserIcon: \"۝\",\n        version: \"0.2.0.0\",\n        meds: [],\n    }\n    // must bind functions that require 'this.' e.g. \n    // this.setState({isEdit: false}});\n    this.handleChangeName = this.handleChangeName.bind(this);\n    this.doChangeNewUserName = this.doChangeNewUserName.bind(this);\n    this.doChangeNewUserColor = this.doChangeNewUserColor.bind(this);\n    this.doChangeNewUserIcon = this.doChangeNewUserIcon.bind(this);\n    this.doAddNewUser = this.doAddNewUser.bind(this);\n    this.fetchAllData = this.fetchAllData.bind(this);\n    this.fetchOnlyUsers = this.fetchOnlyUsers.bind(this);\n    this.fetchOnlyMeds = this.fetchOnlyMeds.bind(this);\n    this.doAddNewMed = this.doAddNewMed.bind(this);\n    this.doMedsCalculations = this.doMedsCalculations.bind(this);\n  }\n\n  // this is called before the \"render() method\n  componentDidMount() {\n    this.fetchAllData();\n  }\n\n  isEmptyOrSpaces(str){\n    return str === null || str.match(/^ *$/) !== null;\n  }\n\n  isSomething(str){\n    return !(str === null || str.match(/^ *$/) !== null);\n  }\n\n  fetchOnlyUsers(){\n    db.table('persons')\n      .toArray()\n      .then((persons) => {\n        this.setState( { persons } )\n      });\n  }\n\n  fetchOnlyMeds(){\n    db.table('meds')\n      .toArray()\n      .then((meds) => {\n        if(meds && meds.length){\n          for(let x = 0, xMax = meds.length; x < xMax; x++){\n            this.doMedsCalculations(meds[x]);\n          }\n        }\n        this.setState( { meds } )\n      });\n  }\n\n  fetchAllData(){\n    // although this works, it should be \n    // re-written to use Dexie \"all\" promise API\n    // so we only update the React state once at the end\n    db.table('persons')\n      .toArray()\n      .then((persons) => {\n        this.setState( { persons }, this.fetchOnlyMeds() )\n      });\n  }\n\n  doMedsCalculations(med){\n    let doses = med.stockAmount / med.scheduleAmount; \n    let days = doses * med.everyNdays;\n    let dayFrom = new Date(Date.parse(med.stockDate + \"T00:00:00Z\"));\n    let now = new Date();\n    let today = new Date(Date.UTC(now.getUTCFullYear(), now.getUTCMonth(), now.getUTCDate() ));\n    let until = new Date(dayFrom.valueOf());\n    until.setDate(until.getDate() + days);\n    let timeDiff = (until.getTime() - today.getTime());\n    let dayDiff = Math.ceil(timeDiff / (1000 * 3600 * 24));\n    med.daysLeft = dayDiff;\n    med.until = this.fromDateToDateString(until);\n  }\n\n  doAddNewMed(personId){\n    let medName = document.getElementById('newMedName_' + personId).value;\n    let medDose = document.getElementById('newMedDose_' + personId).value;\n    let medStrength = document.getElementById('newMedStrength_' + personId).value;\n    let medStock = document.getElementById('newMedStock_' + personId).value;\n    let medEveryNDays = document.getElementById('newMedEveryNDays_' + personId).value;\n    let newMedUnits = document.getElementById('newMedUnits_' + personId).value;\n\n    if(this.isSomething(medName)){\n      const med = {\n        personId: personId,\n        name: medName,\n        strength: medStrength,\n        units: newMedUnits,\n        stockDate: this.today(),\n        stockAmount: medStock,\n        scheduleAmount: medDose,\n        everyNdays: medEveryNDays\n      };\n      db.table('meds')\n      .add(med)\n      .then(this.fetchAllData());\n    }\n  }\n\n  doAddNewUser(){\n    const n = this.state.newUserName;\n    const c = this.state.newUserColor;\n    const i = this.state.newUserIcon;\n    if(!this.isEmptyOrSpaces(n)){\n      const person = {\n        name: n,\n        icon: i,\n        color: c\n      };\n      db.table('persons')\n        .add(person)\n        .then(this.fetchAllData());\n    }\n  }\n\n  handleChangeName(event){\n    this.setState(\n      {newUserName: event.target.value}\n    );\n  }\n\n  doChangeNewUserName(event){\n    this.setState(\n      {newUserName: event.target.value}\n    );\n  }\n\n  doChangeNewUserIcon(event){\n    this.setState(\n      {newUserIcon: event.target.value}\n    );\n  }\n  \n  doChangeNewUserColor(event){\n    this.setState(\n      {newUserColor: event.target.value}\n    );\n  }\n\n  fromDateToDateString(date){\n    let output = date.getFullYear() + '-';\n    let m = date.getMonth();\n    if(m < 9){\n      output += '0'\n    }\n    output += (m + 1) + '-';\n    let d = date.getDate();\n    if(d < 10){\n      output += '0'\n    }\n    output += d;\n    return output;\n  }\n\n  today(){\n    return(this.fromDateToDateString(new Date()));\n  }\n\n  render() {\n    const units = this.state.units.slice();\n    const unitOptions = units.map(\n      (a) => {\n        return (<option key={a} value={a}>{a}</option>)\n      }\n    );\n    const cc = this.state.colors.slice();\n    const colors = cc.map(\n        (n) => {\n          let inlineStyles={backgroundColor: n};\n          return (<option style={inlineStyles} key={n} value={n}>{n}</option>);\n        });\n    let selectColorsStyle={\n      backgroundColor: this.state.newUserColor\n    };\n    let selectColors = <select style={selectColorsStyle} onChange={this.doChangeNewUserColor} value={this.state.newUserColor}>\n        {colors}\n    </select>\n    const ii = this.state.icons.slice();\n    const icons = ii.map((n) => <option key={n} value={n}>{n}</option>);\n    let selectIcons = <select onChange={this.doChangeNewUserIcon} value={this.state.newUserIcon}>\n        {icons}\n    </select>\n      // persons\n      let personsHtml = null;\n      let medsHtml = null;\n      if(this.state.persons){\n        const pp = this.state.persons.slice();\n        personsHtml = pp.map((p) =>{\n            let style = { backgroundColor: p.color };\n            // person drug list\n            let meds = this.state.meds.slice();\n            medsHtml = meds.map(\n              (m) => {\n                if(m.personId === p.id){\n                  return (\n                    <div className=\"pharma-person-medicine\" key={m.id}>\n                      <p><strong>{m.name}</strong> <em>({m.strength})</em></p>\n                      <p>days left: <strong>{m.daysLeft}</strong> <em>({m.until})</em></p>\n                    </div>\n                    );\n                }else{\n                  return (undefined);\n                }\n              });\n            return (\n              <div key={p.id} className=\"pharma-person\" style={style}>\n                <h1>{p.icon} {p.name}</h1>\n                <h4><span role=\"img\" aria-label=\"Medicine\">💊</span> Medicines</h4>\n                <div className=\"pharma-add-new-medecine\">\n                <p>\n                  name: <input id={'newMedName_' + p.id} type=\"text\"></input>\n                </p>\n                <p>units: <select defaultValue={\"tablet(s)\"} id={'newMedUnits_' + p.id}>\n                     {unitOptions}\n                    </select> \n                    </p>\n                <p>strength: <input size=\"7\" maxLength=\"7\" id={'newMedStrength_' + p.id} type=\"text\"></input>\n                </p>\n                <p>dose: <input size=\"7\" maxLength=\"7\" id={'newMedDose_' + p.id} type=\"text\"></input>\n                </p>\n                <p>every \n                    <select defaultValue={\"1\"} id={'newMedEveryNDays_' + p.id}>\n                      <option value=\"1\">1</option>\n                      <option value=\"1\">2</option>\n                      <option value=\"1\">3</option>\n                      <option value=\"1\">4</option>\n                      <option value=\"1\">5</option>\n                      <option value=\"1\">6</option>\n                      <option value=\"1\">7</option>\n                    </select> days \n                    </p>\n                <p>stock level: <input size=\"7\" maxLength=\"7\" id={'newMedStock_' + p.id} type=\"text\"></input>\n                </p>\n                <p><button className=\"pharma-btn pharma-btn-add\" \n                    onClick={\n                      () => {\n                        let newDrugName = '??';\n                        let elem = document.getElementById('newMedName_' + p.id);\n                        if(elem){\n                          newDrugName = elem.value;\n                          this.doAddNewMed(p.id, newDrugName);\n                        }\n                      }\n                    }\n                      >Add</button>\n                </p>\n                </div>\n                {medsHtml}\n              </div>\n            );\n        });\n      }\n      \n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <div className=\"App-header-div\">\n            <div className=\"App-header-div-logo\"><img src={logo} className=\"App-logo\" alt=\"logo\" /></div>\n            <div className=\"App-header-div-title\"><h1>Pharma</h1></div>\n          </div>\n        </header>\n        <section className=\"AppSection\">\n            <h3><span role=\"img\" aria-label=\"People\">👥</span> People</h3>\n            <div>\n              <p>\n                  initials: <input type=\"text\" size=\"5\" maxLength=\"5\" value={this.state.newUserName} onChange={this.doChangeNewUserName} />\n                  color: {selectColors}\n                  icon: {selectIcons}\n                  <button className=\"pharma-btn pharma-btn-add\" onClick={this.doAddNewUser}>Add</button>\n              </p>\n              {personsHtml}\n            </div>\n          </section>\n          <footer className=\"App-footer\">\n            <div className=\"App-footer-div\">\n              <div className=\"App-footer-version\"><p className=\"App-footer-version\">Version: <span className=\"App-footer-version\">{this.state.version}</span></p></div>\n              <div className=\"App-footer-copyright\"><p className=\"App-footer-copyright\">&copy; 2019 molorosh</p></div>\n            </div>\n          </footer>\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.c695c8b2.svg\";"],"sourceRoot":""}