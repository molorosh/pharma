{"version":3,"sources":["db.js","EditPerson.js","EditMedicine.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["db","Dexie","version","stores","persons","meds","EditPerson","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChangeName","event","setState","newUserName","target","value","doChangeNewUserName","doChangeNewUserIcon","newUserIcon","doChangeNewUserColor","newUserColor","doAttemptAddNewUser","n","state","c","i","errUserName","undefined","errorTally","isEmptyOrSpaces","callbackPersonAdd","personId","colors","icons","_this2","table","get","then","person","name","str","match","_this3","classFullname","title","content","otherButtons","slice","map","inlineStyles","backgroundColor","react_default","a","createElement","style","key","selectColorsStyle","selectColors","onChange","selectIcons","Fragment","className","type","size","maxLength","onClick","mode","callbackPersonDelete","onCancel","Component","EditMedecine","medicineId","errName","App","doEditMedicine","console","log","control","doDeleteMedicine","doRestockMedicine","doCancelEdit","doEditUser","doDeleteUser","fetchOnlyUsers","toArray","fetchOnlyMeds","length","x","xMax","doMedsCalculations","fetchAllData","med","days","stockAmount","scheduleAmount","everyNdays","dayFrom","Date","parse","stockDate","now","today","UTC","getUTCFullYear","getUTCMonth","getUTCDate","until","valueOf","setDate","getDate","timeDiff","getTime","dayDiff","Math","ceil","daysLeft","fromDateToDateString","doAddNewMed","medName","document","getElementById","medDose","medStrength","medStock","medEveryNDays","newMedUnits","isSomething","strength","units","add","id","that","assertThisInitialized","where","equals","delete","icon","color","date","output","getFullYear","m","getMonth","d","editControl","src_EditPerson","EditMedicine","src","logo","alt","unitOptions","personsHtml","medsHtml","p","strengthText","role","aria-label","defaultValue","newDrugName","elem","Boolean","window","location","hostname","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__"],"mappings":"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","file":"static/js/main.e9bde38a.chunk.js","sourcesContent":["import Dexie from 'dexie';\n\n// for examples of using Dexie with React.js:\n// q.v. https://github.com/dfahlander/Dexie.js/blob/master/samples/react/src/db.js\n\nconst db = new Dexie('MoloroshPharmaDB');\n// needs to keep the older schemas so Dexie can \n// upgrade from the older version to the newer version\ndb.version(1).stores(\n    { \n        persons: '++id' \n    });\n// the latest version of the database schema\ndb.version(2).stores(\n    { \n        persons: '++id',\n        meds: '++id,personId' \n    });\n\nexport default db;\n\n// persons:\n//   ++id\n//   icon\n//   color\n//   name\n\n// meds\n//   ++id (1)\n//   personid (2)\n//   name (\"aspirin\")\n//   strength (\"500mg\")\n//   units (\"tablets\" of \"tablets\"/\"ml\")\n//   stockDate (\"2018-01-23\")\n//   stockAmount (23) \n//   scheduleAmount (2)\n//   everyNDays (1)\n//   predictedLastFullDoseDate (\"2018-05-01\")\n\n","import React, { Component } from 'react';\r\nimport db from './db';\r\n\r\nclass EditPerson extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            personId: props.personId,\r\n            newUserName: '',\r\n            newUserColor: \"Pink\",\r\n            newUserIcon: \"۝\",\r\n            errUserName: undefined,\r\n            colors: [\"Pink\",\"Orchid\",\"Salmon\",\"Orange\",\"Khaki\",\"Gainsboro\"],\r\n            icons: [\"۝\",\"۞\",\"⊜\",\"⊞\",\"⊙\",\"⊗\"],\r\n        };\r\n    }\r\n\r\n    // this is called before the \"render() method\r\n    componentDidMount() {\r\n        if(this.state.personId){\r\n            db.table('persons')\r\n                .get(this.state.personId)\r\n                .then((person) => {\r\n                    this.setState( { newUserName: person.name } )\r\n                });\r\n        }\r\n    }\r\n\r\n    isEmptyOrSpaces(str){\r\n        return str === null || str.match(/^ *$/) !== null;\r\n    }\r\n\r\n    isSomething(str){\r\n        return !(str === null || str.match(/^ *$/) !== null);\r\n    }\r\n\r\n    handleChangeName = (event) => {\r\n        this.setState(\r\n            {newUserName: event.target.value}\r\n        );\r\n    }\r\n    \r\n    doChangeNewUserName = (event) => {\r\n        this.setState(\r\n            {newUserName: event.target.value}\r\n        );\r\n    }\r\n    \r\n    doChangeNewUserIcon = (event) => {\r\n        this.setState(\r\n            {newUserIcon: event.target.value}\r\n        );\r\n    }\r\n      \r\n    doChangeNewUserColor = (event) => {\r\n        this.setState(\r\n            {newUserColor: event.target.value}\r\n        );\r\n    }\r\n\r\n    doAttemptAddNewUser = () => {\r\n        const n = this.state.newUserName;\r\n        const c = this.state.newUserColor;\r\n        const i = this.state.newUserIcon;\r\n        let errUserName = undefined;\r\n        let errorTally = 0;\r\n        if(this.isEmptyOrSpaces(n)){\r\n            errUserName = \"Please enter a username\";\r\n            errorTally++;\r\n        }\r\n        this.setState(\r\n            {\r\n                errUserName\r\n            },\r\n            () => {\r\n                if(errorTally === 0){\r\n                    this.props.callbackPersonAdd(n, i, c);\r\n                }\r\n            }\r\n        );\r\n    }\r\n\r\n    render(){\r\n        let classFullname = \"pharma-person-control\";\r\n        let title = \"\";\r\n        let content = undefined;\r\n        let otherButtons = undefined;\r\n        if(this.props.personId === undefined){\r\n            classFullname += \" pharma-person-add\"\r\n            title = \"Add New Person\";\r\n            const cc = this.state.colors.slice();\r\n            const colors = cc.map(\r\n                (n) => {\r\n                let inlineStyles={backgroundColor: n};\r\n                return (<option style={inlineStyles} key={n} value={n}>{n}</option>);\r\n                });\r\n            let selectColorsStyle={\r\n            backgroundColor: this.state.newUserColor\r\n            };\r\n            let selectColors = <select style={selectColorsStyle} onChange={this.doChangeNewUserColor} value={this.state.newUserColor}>\r\n                {colors}\r\n            </select>\r\n            const ii = this.state.icons.slice();\r\n            const icons = ii.map((n) => <option key={n} value={n}>{n}</option>);\r\n            let selectIcons = <select onChange={this.doChangeNewUserIcon} value={this.state.newUserIcon}>\r\n                {icons}\r\n            </select>\r\n            content = (\r\n                <>\r\n                    <table className=\"pharma-edit-layout\">\r\n                        <tbody>\r\n                            <tr>\r\n                                <td className=\"pharma-edit-layout-label\">\r\n                                    initials:\r\n                                </td>\r\n                                <td className=\"pharma-edit-layout-control\">\r\n                                    <input type=\"text\" size=\"5\" maxLength=\"5\" value={this.state.newUserName} onChange={this.doChangeNewUserName} />\r\n                                </td>\r\n                                <td className=\"pharma-edit-layout-error\">\r\n                                    {this.state.errUserName}\r\n                                </td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td className=\"pharma-edit-layout-label\">\r\n                                    color:\r\n                                </td>\r\n                                <td className=\"pharma-edit-layout-control\">\r\n                                    {selectColors}\r\n                                </td>\r\n                                <td className=\"pharma-edit-layout-error\">\r\n\r\n                                </td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td className=\"pharma-edit-layout-label\">\r\n                                    icons:\r\n                                </td>\r\n                                <td className=\"pharma-edit-layout-control\">\r\n                                    {selectIcons}\r\n                                </td>\r\n                                <td className=\"pharma-edit-layout-error\">\r\n                                    \r\n                                </td>\r\n                            </tr>\r\n                        </tbody>\r\n                    </table>\r\n                </>\r\n            );\r\n            otherButtons = (<button \r\n                onClick={this.doAttemptAddNewUser} \r\n                className=\"pharma-btn pharma-btn-add\"\r\n                >\r\n                Add New Person\r\n            </button>);\r\n        }else if(this.props.mode === \"delete\"){\r\n            classFullname += \" pharma-person-delete\"\r\n            title = \"Delete Person and Medicines\"\r\n            content = (\r\n                <>\r\n                    <p>person to delete: <strong>{this.state.newUserName}</strong></p>\r\n                </>\r\n            );\r\n            otherButtons = (<button \r\n                onClick={\r\n                    () => {\r\n                        this.props.callbackPersonDelete(this.state.personId);\r\n                    }\r\n                }\r\n                className=\"pharma-btn pharma-btn-delete\"\r\n                >\r\n                Delete [{this.state.newUserName}]\r\n            </button>);\r\n        }else{\r\n            classFullname += \" pharma-person-edit\"\r\n            title = \"Edit Person\";\r\n        }\r\n        return (\r\n            <div className={classFullname}>\r\n                <h3><code>{title}</code></h3>\r\n                {content}\r\n                <p>\r\n                    <button \r\n                        onClick={this.props.onCancel} \r\n                        className=\"pharma-btn pharma-btn-cancel\"\r\n                        >\r\n                        Cancel\r\n                    </button>\r\n                    {otherButtons}\r\n                </p>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default EditPerson;","import React, { Component } from 'react';\r\n\r\nclass EditMedecine extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            personId: props.personId,\r\n            medicineId: props.medicineId,\r\n        };\r\n    }\r\n\r\n    render(){\r\n        let classFullname = \"pharma-medicine-control\";\r\n        let title = \"\";\r\n        if(this.props.medicineId === undefined){\r\n            classFullname += \" pharma-medicine-add\"\r\n            title = \"Add New Medicine\";\r\n        }else if(this.props.mode === \"delete\"){\r\n            classFullname += \" pharma-medicine-delete\"\r\n            title = \"Delete Medicine\"\r\n        }else if(this.props.mode === \"restock\"){\r\n            classFullname += \" pharma-medicine-restock\"\r\n            title = \"Restock Medicine\"\r\n        }else{\r\n            title = \"Edit Medicine\";\r\n            classFullname += \" pharma-medicine-edit\"\r\n        }\r\n        return (\r\n            <div className={classFullname}>\r\n                <h3><code>{title}</code></h3>\r\n                <p><code>personId: {this.state.personId}</code></p>\r\n                <p><code>medicineId: {this.state.medicineId}</code></p> \r\n                <table>\r\n                    <tbody>\r\n                        <tr>\r\n                            <td className=\"pharma-edit-layout-label\">\r\n                                name:\r\n                            </td>\r\n                            <td className=\"pharma-edit-layout-control\">\r\n                                <input type=\"text\" />\r\n                            </td>\r\n                            <td className=\"pharma-edit-layout-error\">\r\n                                {this.state.errName}\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td className=\"pharma-edit-layout-label\">\r\n                                units:\r\n                            </td>\r\n                            <td className=\"pharma-edit-layout-control\">\r\n                                \r\n                            </td>\r\n                            <td className=\"pharma-edit-layout-error\">\r\n                                \r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td className=\"pharma-edit-layout-label\">\r\n                                strength:\r\n                            </td>\r\n                            <td className=\"pharma-edit-layout-control\">\r\n                                \r\n                            </td>\r\n                            <td className=\"pharma-edit-layout-error\">\r\n                                \r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td className=\"pharma-edit-layout-label\">\r\n                                dose:\r\n                            </td>\r\n                            <td className=\"pharma-edit-layout-control\">\r\n                                \r\n                            </td>\r\n                            <td className=\"pharma-edit-layout-error\">\r\n                                \r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td className=\"pharma-edit-layout-label\">\r\n                                strength:\r\n                            </td>\r\n                            <td className=\"pharma-edit-layout-control\">\r\n                                \r\n                            </td>\r\n                            <td className=\"pharma-edit-layout-error\">\r\n                                \r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td className=\"pharma-edit-layout-label\">\r\n                                strength:\r\n                            </td>\r\n                            <td className=\"pharma-edit-layout-control\">\r\n                                \r\n                            </td>\r\n                            <td className=\"pharma-edit-layout-error\">\r\n                                \r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td className=\"pharma-edit-layout-label\">\r\n                                every:\r\n                            </td>\r\n                            <td className=\"pharma-edit-layout-control\">\r\n                                XX days\r\n                            </td>\r\n                            <td className=\"pharma-edit-layout-error\">\r\n                                \r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td className=\"pharma-edit-layout-label\">\r\n                                stock level:\r\n                            </td>\r\n                            <td className=\"pharma-edit-layout-control\">\r\n                                \r\n                            </td>\r\n                            <td className=\"pharma-edit-layout-error\">\r\n                                \r\n                            </td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n                <p>\r\n                    <button \r\n                        onClick={this.props.onCancel} \r\n                        className=\"pharma-btn pharma-btn-cancel\"\r\n                        >\r\n                        Cancel\r\n                    </button>\r\n                </p>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default EditMedecine;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport db from './db';\nimport './App.css';\nimport EditPerson from './EditPerson';\nimport EditMedicine from './EditMedicine';\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n        units: [\"tablets(s)\",\"ml\"],\n        // mode: 'list','edit','delete','add','restock'\n        mode: 'list',\n        // control: 'undefined', 'person', 'medicine'\n        control: undefined,\n        // personId: the primary key of the person to be added, edited or deleted\n        personId: undefined,\n        // medicineId: the primary key of the medicine to be added, edited or deleted\n        medicineId: undefined,\n        version: \"0.5.0.0\",\n        meds: [],\n    }\n  }\n\n  // this is called before the \"render() method\n  componentDidMount() {\n    this.fetchAllData();\n  }\n\n  isEmptyOrSpaces(str){\n    return str === null || str.match(/^ *$/) !== null;\n  }\n\n  isSomething(str){\n    return !(str === null || str.match(/^ *$/) !== null);\n  }\n\n  doEditMedicine = (personId, medicineId) => {\n    console.log(\"doEditMedicine(\" + personId + \",\" + medicineId + \")\");\n    this.setState(\n      {\n        mode: 'edit',\n        personId: personId,\n        medicineId: medicineId,\n        control: 'medicine'\n      }\n    );\n  }\n\n  doDeleteMedicine = (personId, medicineId) => {\n    console.log(\"doDeleteMedicine(\" + personId + \",\" + medicineId + \")\");\n    this.setState(\n      {\n        mode: 'delete',\n        personId: personId,\n        medicineId: medicineId,\n        control: 'medicine'\n      }\n    );\n  }\n\n  doRestockMedicine = (personId, medicineId) => {\n    console.log(\"doRestockMedicine(\" + personId + \",\" + medicineId + \")\");\n    this.setState(\n      {\n        mode: 'restock',\n        personId: personId,\n        medicineId: medicineId,\n        control: 'medicine'\n      }\n    );\n  }\n\n  doCancelEdit = () => {\n    this.setState(\n      {\n        mode: 'list',\n        personId: undefined,\n        medicineId: undefined,\n        control: undefined\n      }\n    );\n  }\n\n  doEditUser = (personId) => {\n    this.setState(\n      {\n        mode: 'edit',\n        personId: personId,\n        medicineId: undefined,\n        control: 'person'\n      }\n    );\n  }\n\n  doDeleteUser = (personId) => {\n    this.setState(\n      {\n        mode: 'delete',\n        personId: personId,\n        medicineId: undefined,\n        control: 'person'\n      }\n    );\n  }\n\n  fetchOnlyUsers = () => {\n    db.table('persons')\n      .toArray()\n      .then((persons) => {\n        this.setState( { persons } )\n      });\n  }\n\n  fetchOnlyMeds = () => {\n    db.table('meds')\n      .toArray()\n      .then((meds) => {\n        if(meds && meds.length){\n          for(let x = 0, xMax = meds.length; x < xMax; x++){\n            this.doMedsCalculations(meds[x]);\n          }\n        }\n        this.setState( { meds } )\n      });\n  }\n\n  fetchAllData = () => {\n    // although this works, it should be \n    // re-written to use Dexie \"all\" promise API\n    // so we only update the React state once at the end\n    db.table('persons')\n      .toArray()\n      .then((persons) => {\n        this.setState( { persons, mode: 'list' }, this.fetchOnlyMeds() )\n      });\n  }\n\n  doMedsCalculations = (med) => {\n    let doses = med.stockAmount / med.scheduleAmount; \n    let days = doses * med.everyNdays;\n    let dayFrom = new Date(Date.parse(med.stockDate + \"T00:00:00Z\"));\n    let now = new Date();\n    let today = new Date(Date.UTC(now.getUTCFullYear(), now.getUTCMonth(), now.getUTCDate() ));\n    let until = new Date(dayFrom.valueOf());\n    until.setDate(until.getDate() + days);\n    let timeDiff = (until.getTime() - today.getTime());\n    let dayDiff = Math.ceil(timeDiff / (1000 * 3600 * 24));\n    med.daysLeft = dayDiff;\n    med.until = this.fromDateToDateString(until);\n  }\n\n  doAddNewMed = (personId) => {\n    let medName = document.getElementById('newMedName_' + personId).value;\n    let medDose = document.getElementById('newMedDose_' + personId).value;\n    let medStrength = document.getElementById('newMedStrength_' + personId).value;\n    let medStock = document.getElementById('newMedStock_' + personId).value;\n    let medEveryNDays = document.getElementById('newMedEveryNDays_' + personId).value;\n    let newMedUnits = document.getElementById('newMedUnits_' + personId).value;\n\n    if(this.isSomething(medName)){\n      const med = {\n        personId: personId,\n        name: medName,\n        strength: medStrength,\n        units: newMedUnits,\n        stockDate: this.today(),\n        stockAmount: medStock,\n        scheduleAmount: medDose,\n        everyNdays: medEveryNDays\n      };\n      db.table('meds')\n      .add(med)\n      .then(this.fetchAllData());\n    }\n  }\n\n  callbackPersonDelete = (id) => {\n    // delete the medicines, then the person\n    let that = this;\n    db.table('meds')\n      .where('personId')\n      .equals(id)\n      .delete()\n      .then(function(){\n        db.table('persons').where('id')\n        .equals(id)\n        .delete()\n        .then(function(){\n          that.setState(\n            {\n              mode: 'list',\n              personId: undefined,\n              medicineId: undefined,\n              control: undefined\n            }, \n            () => { that.fetchAllData(); });\n        })\n      })\n  }\n\n  callbackPersonAdd = (name,icon,color) => {\n    const person = {\n      name: name,\n      icon: icon,\n      color: color\n    };\n    db.table('persons')\n      .add(person)\n      .then(this.fetchAllData());\n  }\n\n  handleChangeName = (event) => {\n    this.setState(\n      {newUserName: event.target.value}\n    );\n  }\n\n  doChangeNewUserName = (event) => {\n    this.setState(\n      {newUserName: event.target.value}\n    );\n  }\n\n  doChangeNewUserIcon = (event) => {\n    this.setState(\n      {newUserIcon: event.target.value}\n    );\n  }\n  \n  doChangeNewUserColor = (event) => {\n    this.setState(\n      {newUserColor: event.target.value}\n    );\n  }\n\n  fromDateToDateString = (date) => {\n    let output = date.getFullYear() + '-';\n    let m = date.getMonth();\n    if(m < 9){\n      output += '0'\n    }\n    output += (m + 1) + '-';\n    let d = date.getDate();\n    if(d < 10){\n      output += '0'\n    }\n    output += d;\n    return output;\n  }\n\n  today = () => {\n    return(this.fromDateToDateString(new Date()));\n  }\n\n  render() {\n    if(this.state.mode !== \"list\" && this.state.control){\n      let editControl = undefined;\n      if(this.state.control === \"person\"){\n        editControl = (\n          <EditPerson\n            onCancel={this.doCancelEdit} \n            mode={this.state.mode} \n            personId={this.state.personId}\n            callbackPersonAdd={this.callbackPersonAdd}\n            callbackPersonDelete={this.callbackPersonDelete}\n            >\n          </EditPerson>\n        );\n      }else if(this.state.control === \"medicine\"){\n        editControl = (\n          <EditMedicine\n            onCancel={this.doCancelEdit} \n            mode={this.state.mode} \n            personId={this.state.personId}\n            medicineId={this.state.medicineId}\n            >\n          </EditMedicine>\n        );\n      }\n      return (\n        <div className=\"App\">\n        <header className=\"App-header\">\n          <div className=\"App-header-div\">\n            <div className=\"App-header-div-logo\"><img src={logo} className=\"App-logo\" alt=\"logo\" /></div>\n            <div className=\"App-header-div-title\"><h1>Pharma</h1></div>\n          </div>\n        </header>\n        <section className=\"AppSection\">\n          {editControl}\n        </section>\n        <footer className=\"App-footer\">\n            <div className=\"App-footer-div\">\n              <div className=\"App-footer-version\"><p className=\"App-footer-version\">Version: <span className=\"App-footer-version\">{this.state.version}</span></p></div>\n              <div className=\"App-footer-copyright\"><p className=\"App-footer-copyright\">&copy; 2019 molorosh</p></div>\n            </div>\n          </footer>\n      </div>    \n      );\n    }\n\n    const units = this.state.units.slice();\n    const unitOptions = units.map(\n      (a) => {\n        return (<option key={a} value={a}>{a}</option>)\n      }\n    );\n      // persons\n      let personsHtml = null;\n      let medsHtml = null;\n      if(this.state.persons){\n        const pp = this.state.persons.slice();\n        personsHtml = pp.map((p) =>{\n            let style = { backgroundColor: p.color };\n            // person drug list\n            let meds = this.state.meds.slice();\n            medsHtml = meds.map(\n              (m) => {\n                if(m.personId === p.id){\n                  let strengthText = (<></>);\n                  if(this.isSomething(m.strength)){\n                    strengthText = (<em>({m.strength})</em>);\n                  }\n                  return (\n                    <div className=\"pharma-person-medicine\" key={m.id}>\n                      <p className=\"pharma-person-medicine-edit\">\n                        <button \n                          onClick={() => {\n                            this.doEditMedicine(p.id, m.id);\n                          }} \n                          className=\"pharma-btn pharma-btn-edit\"\n                          >\n                            Edit Medicine\n                        </button>\n                        <br/>\n                        <button \n                          onClick={() => {\n                            this.doRestockMedicine(p.id, m.id);\n                          }} \n                          className=\"pharma-btn pharma-btn-restock\"\n                          >\n                            Restock Medicine\n                        </button>\n                        <br/>\n                        <button \n                          onClick={() => {\n                            this.doDeleteMedicine(p.id, m.id);\n                          }} \n                          className=\"pharma-btn pharma-btn-delete\"\n                          >\n                            Delete Medicine\n                        </button>\n                      </p>\n                      <p><strong>{m.name}</strong> {strengthText}</p>\n                      <p>{m.scheduleAmount} {m.units} every {m.everyNdays} day(s)</p>\n                      <p>days left: <strong>{m.daysLeft}</strong> <em>({m.until})</em></p>\n                    </div>\n                    );\n                }else{\n                  return (undefined);\n                }\n              });\n            return (\n              <div key={p.id} className=\"pharma-person\" style={style}>\n                <p className=\"pharma-delete-person-para\">\n                  <button\n                    onClick={\n                      () => {\n                        this.doDeleteUser(p.id);\n                      }\n                    } \n                    className=\"pharma-btn pharma-btn-delete\" >delete person</button>\n                </p>\n                <h1>{p.icon} {p.name}</h1>\n                <h4><span role=\"img\" aria-label=\"Medicine\">💊</span> Medicines</h4>\n                <p>\n                  <button \n                    onClick={() => {this.doEditMedicine(p.id, undefined);}} \n                    className=\"pharma-btn pharma-btn-add\">\n                      Add Medicine\n                    </button>\n                  </p>\n                <div className=\"pharma-add-new-medecine\">\n                <p>\n                  name: <input id={'newMedName_' + p.id} type=\"text\"></input>\n                </p>\n                <p>units: <select defaultValue={\"tablet(s)\"} id={'newMedUnits_' + p.id}>\n                     {unitOptions}\n                    </select> \n                    </p>\n                <p>strength: <input size=\"7\" maxLength=\"7\" id={'newMedStrength_' + p.id} type=\"text\"></input>\n                </p>\n                <p>dose: <input size=\"7\" maxLength=\"7\" id={'newMedDose_' + p.id} type=\"text\"></input>\n                </p>\n                <p>every \n                    <select defaultValue={\"1\"} id={'newMedEveryNDays_' + p.id}>\n                      <option value=\"1\">1</option>\n                      <option value=\"1\">2</option>\n                      <option value=\"1\">3</option>\n                      <option value=\"1\">4</option>\n                      <option value=\"1\">5</option>\n                      <option value=\"1\">6</option>\n                      <option value=\"1\">7</option>\n                    </select> days \n                    </p>\n                <p>stock level: <input size=\"7\" maxLength=\"7\" id={'newMedStock_' + p.id} type=\"text\"></input>\n                </p>\n                <p><button className=\"pharma-btn pharma-btn-add\" \n                    onClick={\n                      () => {\n                        let newDrugName = '??';\n                        let elem = document.getElementById('newMedName_' + p.id);\n                        if(elem){\n                          newDrugName = elem.value;\n                          this.doAddNewMed(p.id, newDrugName);\n                        }\n                      }\n                    }\n                      >Add</button>\n                </p>\n                </div>\n                {medsHtml}\n              </div>\n            );\n        });\n      }\n      \n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <div className=\"App-header-div\">\n            <div className=\"App-header-div-logo\"><img src={logo} className=\"App-logo\" alt=\"logo\" /></div>\n            <div className=\"App-header-div-title\"><h1>Pharma</h1></div>\n          </div>\n        </header>\n        <section className=\"AppSection\">\n            <h3><span role=\"img\" aria-label=\"People\">👥</span> People</h3>\n            <p>\n              <button className=\"pharma-btn pharma-btn-add\" onClick={() => { this.doEditUser(undefined) }}>New Person</button>\n            </p>\n            <div>\n              {personsHtml}\n            </div>\n          </section>\n          <footer className=\"App-footer\">\n            <div className=\"App-footer-div\">\n              <div className=\"App-footer-version\"><p className=\"App-footer-version\">Version: <span className=\"App-footer-version\">{this.state.version}</span></p></div>\n              <div className=\"App-footer-copyright\"><p className=\"App-footer-copyright\">&copy; 2019 molorosh</p></div>\n            </div>\n          </footer>\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.c695c8b2.svg\";"],"sourceRoot":""}