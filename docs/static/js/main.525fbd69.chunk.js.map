{"version":3,"sources":["DrugSchedule.js","Drug.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["DrugSchedule","props","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","val","_this","hours","Array","from","keys","map","n","react_default","a","createElement","key","value","formatTo00","minutes","days","id","hour","minute","amount","unit","Component","Drug","state","name","timestamp","undefined","schedules","nextId","handleChangeUnit","bind","assertThisInitialized","handleChangeName","handleChangeAmount","handleFormSubmit","addNewSchedule","handleDrugScheduleDelete","handleDrugScheduleUpdate","event","setState","target","preventDefault","newSchedule","everyNdays","concat","alert","newHour","newMinute","newAmount","newEveryNDays","_this2","units","slice","onSubmit","type","onChange","e","onClick","src_DrugSchedule","App","className","src","logo","alt","src_Drug","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.525fbd69.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n//import { parentPort } from 'worker_threads';\r\n\r\nclass DrugSchedule extends Component {\r\n    constructor(props){\r\n        super(props);/*\r\n        this.state = {\r\n            id: props.id,\r\n            hour: props.hour,\r\n            minute: props.minute,\r\n            amount: props.amount,\r\n            everyNdays: props.everyNdays,\r\n            isChanged: false,\r\n        };*/\r\n    }\r\n\r\n    formatTo00(val){\r\n        if(val < 10){\r\n            return \"0\" + val;\r\n        }else{\r\n            return val;\r\n        }\r\n    }\r\n\r\n    render(){\r\n        const hh = Array.from(Array(24).keys());\r\n        const hours = hh.map((n) => <option key={n} value={n}>{this.formatTo00(n)}</option>);\r\n        const mm = Array.from(Array(60).keys());\r\n        const minutes = mm.map((n) => <option key={n} value={n}>{this.formatTo00(n)}</option>);\r\n        const dd = Array.from(Array(14).keys());\r\n        const days = dd.map((n) => <option key={n+1} value={n+1}>{n+1}</option>);\r\n        return (\r\n            <div>\r\n                <p>\r\n                    key:{this.props.id} \r\n                    |\r\n                    Hour:{this.props.hour} \r\n                    <select >{hours}</select>\r\n                    |\r\n                    Minute:{this.props.minute} \r\n                    <select>{minutes}</select>\r\n                    | \r\n                    Every <select>{days}</select> Days\r\n                    | \r\n                    Amount:{this.props.amount} \r\n                    | \r\n                    ({this.props.unit}) \r\n                    |\r\n                    <button>Update</button>\r\n                    |\r\n                    <button>Delete</button>\r\n                </p>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DrugSchedule;","import React, { Component } from 'react';\r\nimport DrugSchedule from './DrugSchedule';\r\n\r\nclass Drug extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            name: \"\",\r\n            unit: \"\",\r\n            amount: 28,\r\n            timestamp: undefined, \r\n            schedules: [],  \r\n            nextId: 1,\r\n        }\r\n        // drug events\r\n        this.handleChangeUnit = this.handleChangeUnit.bind(this);\r\n        this.handleChangeName = this.handleChangeName.bind(this);\r\n        this.handleChangeAmount = this.handleChangeAmount.bind(this);\r\n        this.handleFormSubmit = this.handleFormSubmit.bind(this);\r\n        // schedule events\r\n        this.addNewSchedule = this.addNewSchedule.bind(this);\r\n        this.handleDrugScheduleDelete = this.handleDrugScheduleDelete.bind(this);\r\n        this.handleDrugScheduleUpdate = this.handleDrugScheduleUpdate.bind(this);\r\n    }\r\n\r\n    handleChangeUnit(event){\r\n        this.setState({unit: event.target.value});\r\n    }\r\n\r\n    handleChangeName(event){\r\n        this.setState({name: event.target.value});\r\n    }\r\n\r\n    handleChangeAmount(event){\r\n        this.setState({amount: event.target.value});\r\n    }\r\n\r\n    handleFormSubmit(event){\r\n        event.preventDefault();\r\n    }\r\n\r\n    addNewSchedule(){\r\n        let nextId = this.state.nextId + 1;\r\n        let newSchedule = {hour:12, minute:20, amount: 3, everyNdays: 3, id: nextId};\r\n        this.setState(\r\n            { \r\n                schedules: this.state.schedules.concat(newSchedule),\r\n                nextId: nextId,\r\n            }\r\n        );\r\n    }\r\n\r\n    handleDrugScheduleDelete(id){\r\n        alert(\"delete \" + id);\r\n    }\r\n\r\n    handleDrugScheduleUpdate(id, newHour, newMinute, newAmount, newEveryNDays){\r\n        alert(\"upd8 \" + id + \" \" + newHour + \" \" + newMinute + \" \" + newAmount + \" \" + newEveryNDays);\r\n    }\r\n\r\n    render(){\r\n        const units = this.props.units.slice();\r\n        const schedules = this.state.schedules.slice();\r\n        return (\r\n            <div>\r\n                <form onSubmit={this.handleFormSubmit}>\r\n                    <p>\r\n                        name: \r\n                        <input type=\"text\" value={this.state.name} onChange={this.handleChangeName} />\r\n                    </p>\r\n                    <p>\r\n                        amount: \r\n                        <input type=\"number\" value={this.state.amount} onChange={this.handleChangeAmount} />\r\n                        <select value={this.state.unit} onChange={this.handleChangeUnit}>\r\n                            {units.map((e, key) => {\r\n                                return <option key={key} value={e}>{e} ({key})</option>;\r\n                            })}\r\n                        </select>\r\n                    </p>\r\n                    <p>as at: {this.state.timestamp}</p>\r\n                    <p><input type=\"datetime\" /></p>\r\n                    <h2>Schedules</h2>\r\n                    <p><button onClick={this.addNewSchedule}>Add Schedule</button></p>\r\n                    {\r\n                        schedules.map(\r\n                            (e, key) => {\r\n                                return <DrugSchedule \r\n                                    key={e.id} \r\n                                    id={e.id} \r\n                                    hour={e.hour} \r\n                                    minute={e.minute} \r\n                                    amount={e.amount} \r\n                                    unit={this.state.unit} \r\n                                ></DrugSchedule>;\r\n                            }\r\n                        )\r\n                    }\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Drug;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport Drug from './Drug';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n        units: [\"pill(s)\",\"mg\",\"ml\"],\n    }\n}\n\n  render() {\n    const units = this.state.units.slice();\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <div className=\"App-header-div\">\n            <div className=\"App-header-div-logo\"><img src={logo} className=\"App-logo\" alt=\"logo\" /></div>\n            <div className=\"App-header-div-title\"><h1>Pharma</h1></div>\n          </div>\n        </header>\n        <section>\n            <h2>Medicine</h2>\n            <ul>\n              <li>[TODO] medicine details, dose and start date and time</li>\n            </ul>\n            <Drug units={units}></Drug>\n          </section>  \n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.c695c8b2.svg\";"],"sourceRoot":""}