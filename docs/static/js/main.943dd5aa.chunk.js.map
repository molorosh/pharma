{"version":3,"sources":["logo.svg","db.js","EditPerson.js","AppDal.js","EditMedicine.js","Documentation.js","About.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","db","Dexie","version","stores","persons","meds","EditPerson","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChangeName","event","setState","newUserName","target","value","doChangeNewUserName","doChangeNewUserIcon","newUserIcon","doChangeNewUserColor","newUserColor","doAttemptAddNewUser","n","state","c","i","errUserName","undefined","errorTally","isEmptyOrSpaces","callbackPersonAdd","personId","colors","icons","_this2","table","get","then","person","name","str","match","_this3","classFullname","title","content","otherButtons","slice","map","inlineStyles","backgroundColor","react_default","a","createElement","style","key","selectColorsStyle","selectColors","onChange","selectIcons","Fragment","className","colSpan","type","size","maxLength","onClick","mode","callbackPersonDelete","onCancel","Component","dal","fromDateToDateString","date","output","getFullYear","m","getMonth","d","getDate","today","Date","restockMedication","medicineId","txtRestock","errors","lvl","push","msg","parseInt","toString","length","changes","stockDate","stockAmount","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","where","equals","modify","stop","mustBeSomething","strText","ret","isValid","isSomething","mustBePositiveInteger","intText","addMedication","dose","strength","everyNdays","units","restockValidation","nameValidation","doseValidation","strengthValidation","med","scheduleAmount","_callee2","_context2","add","deleteMedication","delete","EditMedecine","doChange_stockAmount","doChange_name","doChange_units","doChange_strength","doChange_stockDate","doChange_scheduleAmount","doChange_everyNdays","clearErrors","err_stockAmount","err_everyNdays","err_name","err_scheduleAmount","err_stockDate","err_strength","err_units","showErrors","x","xMax","processRestock","onRestock","processDelete","onDelete","processAdd","console","log","onAdd","unitList","dayList","that","actionButtons","mainContent","strengthText","med_strength","medDescription","med_name","unitOptions","daysOptions","Documentation","role","aria-label","href","doClose","About","App","doShowPeople","docsMode","doShowHelp","doShowAbout","doEditMedicine","control","doDeleteMedicine","doRestockMedicine","doCancelEdit","doEditUser","doDeleteUser","fetchOnlyUsers","toArray","fetchOnlyMeds","doMedsCalculations","fetchAllData","days","dayFrom","parse","now","UTC","getUTCFullYear","getUTCMonth","getUTCDate","until","valueOf","setDate","timeDiff","getTime","dayDiff","Math","ceil","daysLeft","callbackMedicineDelete","callbackMedicineRestock","callbackMedicineAdd","id","assertThisInitialized","icon","color","editControl","src_EditPerson","EditMedicine","src_Documentation","src_About","src","logo","alt","personsHtml","medsHtml","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.943dd5aa.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.c695c8b2.svg\";","import Dexie from 'dexie';\n\n// for examples of using Dexie with React.js:\n// q.v. https://github.com/dfahlander/Dexie.js/blob/master/samples/react/src/db.js\n\nconst db = new Dexie('MoloroshPharmaDB');\n// needs to keep the older schemas so Dexie can \n// upgrade from the older version to the newer version\ndb.version(1).stores(\n    { \n        persons: '++id' \n    });\n// the latest version of the database schema\ndb.version(2).stores(\n    { \n        persons: '++id',\n        meds: '++id,personId' \n    });\n\nexport default db;\n\n// persons:\n//   ++id\n//   icon\n//   color\n//   name\n\n// meds\n//   ++id (1)\n//   personid (2)\n//   name (\"aspirin\")\n//   strength (\"500mg\")\n//   units (\"tablets\" of \"tablets\"/\"ml\")\n//   stockDate (\"2018-01-23\")\n//   stockAmount (23) \n//   scheduleAmount (2)\n//   everyNDays (1)\n//   predictedLastFullDoseDate (\"2018-05-01\")\n\n","import React, { Component } from 'react';\nimport db from './db';\n\nclass EditPerson extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            personId: props.personId,\n            newUserName: '',\n            newUserColor: \"Pink\",\n            newUserIcon: \"۝\",\n            errUserName: undefined,\n            colors: [\"Pink\",\"Orchid\",\"Salmon\",\"Orange\",\"Khaki\",\"Gainsboro\"],\n            icons: [\"۝\",\"۞\",\"⊜\",\"⊞\",\"⊙\",\"⊗\"],\n        };\n    }\n\n    // this is called before the \"render() method\n    componentDidMount() {\n        if(this.state.personId){\n            db.table('persons')\n                .get(this.state.personId)\n                .then((person) => {\n                    this.setState( { newUserName: person.name } )\n                });\n        }\n    }\n\n    isEmptyOrSpaces(str){\n        return str === null || str === undefined || str.match(/^ *$/) !== null;\n    }\n    \n    isSomething(str){\n        return !this.isEmptyOrSpaces(str);\n    }\n\n    handleChangeName = (event) => {\n        this.setState(\n            {newUserName: event.target.value}\n        );\n    }\n    \n    doChangeNewUserName = (event) => {\n        this.setState(\n            {newUserName: event.target.value}\n        );\n    }\n    \n    doChangeNewUserIcon = (event) => {\n        this.setState(\n            {newUserIcon: event.target.value}\n        );\n    }\n      \n    doChangeNewUserColor = (event) => {\n        this.setState(\n            {newUserColor: event.target.value}\n        );\n    }\n\n    doAttemptAddNewUser = () => {\n        const n = this.state.newUserName;\n        const c = this.state.newUserColor;\n        const i = this.state.newUserIcon;\n        let errUserName = undefined;\n        let errorTally = 0;\n        if(this.isEmptyOrSpaces(n)){\n            errUserName = \"Please enter intitials (or nickname)\";\n            errorTally++;\n        }\n        this.setState(\n            {\n                errUserName\n            },\n            () => {\n                if(errorTally === 0){\n                    this.props.callbackPersonAdd(n, i, c);\n                }\n            }\n        );\n    }\n\n    render(){\n        let classFullname = \"pharma-person-control\";\n        let title = \"\";\n        let content = undefined;\n        let otherButtons = undefined;\n        if(this.props.personId === undefined){\n            classFullname += \" pharma-person-add\"\n            title = \"Add New Person\";\n            const cc = this.state.colors.slice();\n            const colors = cc.map(\n                (n) => {\n                let inlineStyles={backgroundColor: n};\n                return (<option style={inlineStyles} key={n} value={n}>{n}</option>);\n                });\n            let selectColorsStyle={\n            backgroundColor: this.state.newUserColor\n            };\n            let selectColors = <select style={selectColorsStyle} onChange={this.doChangeNewUserColor} value={this.state.newUserColor}>\n                {colors}\n            </select>\n            const ii = this.state.icons.slice();\n            const icons = ii.map((n) => <option key={n} value={n}>{n}</option>);\n            let selectIcons = <select onChange={this.doChangeNewUserIcon} value={this.state.newUserIcon}>\n                {icons}\n            </select>\n            content = (\n                <>\n                    <table className=\"pharma-edit-layout\">\n                        <tbody>\n                            <tr>\n                                <td colSpan=\"2\" className=\"pharma-edit-layout-error\">\n                                    {this.state.errUserName}\n                                </td>\n                            </tr>\n                            <tr>\n                                <td className=\"pharma-edit-layout-label\">\n                                    initials:\n                                </td>\n                                <td className=\"pharma-edit-layout-control\">\n                                    <input type=\"text\" size=\"5\" maxLength=\"5\" value={this.state.newUserName} onChange={this.doChangeNewUserName} />\n                                </td>\n                            </tr>\n                            <tr>\n                                <td colSpan=\"2\" className=\"pharma-edit-layout-error\">\n\n                                </td>\n                            </tr>\n                            <tr>\n                                <td className=\"pharma-edit-layout-label\">\n                                    color:\n                                </td>\n                                <td className=\"pharma-edit-layout-control\">\n                                    {selectColors}\n                                </td>\n                            </tr>\n                            <tr>\n                                <td colSpan=\"2\" className=\"pharma-edit-layout-error\">\n                                    \n                                </td>\n                            </tr>\n                            <tr>\n                                <td className=\"pharma-edit-layout-label\">\n                                    icons:\n                                </td>\n                                <td className=\"pharma-edit-layout-control\">\n                                    {selectIcons}\n                                </td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </>\n            );\n            otherButtons = (<button \n                onClick={this.doAttemptAddNewUser} \n                className=\"pharma-btn pharma-btn-add\"\n                >\n                Add New Person\n            </button>);\n        }else if(this.props.mode === \"delete\"){\n            classFullname += \" pharma-person-delete\"\n            title = \"Delete Person and Medicines\"\n            content = (\n                <>\n                    <p>person to delete: <strong>{this.state.newUserName}</strong></p>\n                </>\n            );\n            otherButtons = (<button \n                onClick={\n                    () => {\n                        this.props.callbackPersonDelete(this.state.personId);\n                    }\n                }\n                className=\"pharma-btn pharma-btn-delete\"\n                >\n                Delete [{this.state.newUserName}]\n            </button>);\n        }else{\n            classFullname += \" pharma-person-edit\"\n            title = \"Edit Person\";\n        }\n        return (\n            <div className={classFullname}>\n                <h3><code>{title}</code></h3>\n                {content}\n                <p>\n                    <button \n                        onClick={this.props.onCancel} \n                        className=\"pharma-btn pharma-btn-cancel\"\n                        >\n                        Cancel\n                    </button>\n                    {otherButtons}\n                </p>\n            </div>\n        );\n    }\n}\n\nexport default EditPerson;","import db from './db';\n// TODO - at some point should split this into a Business Logic Layer\n// and a (hidden) Data Access Layer\nclass AppDal {\n    \n    isEmptyOrSpaces(str){\n        return str === null || str === undefined || str.match(/^ *$/) !== null;\n    }\n    \n    isSomething(str){\n        return !this.isEmptyOrSpaces(str);\n    }\n    \n    fromDateToDateString = (date) => {\n        let output = date.getFullYear() + '-';\n        let m = date.getMonth();\n        if(m < 9){\n            output += '0'\n        }\n        output += (m + 1) + '-';\n        let d = date.getDate();\n        if(d < 10){\n            output += '0'\n        }\n        output += d;\n        return output;\n    }\n\n    today = () => {\n        return(this.fromDateToDateString(new Date()));\n    }\n\n    restockMedication = (medicineId, txtRestock) => {\n        let errors = [];\n        let lvl = undefined;\n        if(this.isEmptyOrSpaces(txtRestock)){\n            errors.push({name: \"err_stockAmount\", msg: \"You must supply a restock level\" });\n        }else{\n            lvl = parseInt(txtRestock, 10);\n            if(lvl && lvl.toString && lvl.toString() === txtRestock){\n                if(lvl < 1){\n                    errors.push({name: \"err_stockAmount\", msg: \"Restock level must be more than zero\" });\n                }\n            }else{\n                errors.push({name: \"err_stockAmount\", msg: \"You must supply a valid restock level\" });\n            }\n        }\n        if(errors.length === 0){\n            // do the update\n            let changes = {\n                stockDate: this.today(),\n                stockAmount: lvl\n            };\n            (async () => {\n                await db.table(\"meds\")\n                    .where(\":id\")\n                    .equals(medicineId)\n                    .modify(changes);\n            })();\n        }\n        return errors;\n    }\n\n    mustBeSomething = (strText, name) => {\n        let ret = { \n            isValid: false,\n            value: undefined,\n            msg: undefined\n        }\n        if(!this.isSomething(strText)){\n            ret.msg = \"You must supply a \" + name;\n        }else{\n            ret.isValid = true;\n            ret.value = strText;\n        }\n        return ret;\n    }\n\n    mustBePositiveInteger = (intText, name) => {\n        let ret = { \n            isValid: false,\n            value: undefined,\n            msg: undefined\n        }\n        let lvl = undefined;\n        if(this.isEmptyOrSpaces(intText)){\n            ret.msg = \"You must supply a \" + name;\n        }else{\n            lvl = parseInt(intText, 10);\n            if(lvl && lvl.toString && lvl.toString() === intText){\n                if(lvl < 1){\n                    ret.msg = name + \" must be more than zero\";\n                }\n                else{\n                    ret.isValid = true;\n                    ret.value = lvl;\n                }\n            }else{\n                ret.msg = \"You must supply a valid \" + name;\n            }\n        }\n        return ret;\n    }\n\n    addMedication = (\n        personId, \n        name,\n        stockAmount,\n        dose,\n        strength,\n        everyNdays,\n        units\n        ) => {\n        let errors = [];\n        let restockValidation = this.mustBePositiveInteger(stockAmount, \"Stock Amount\");\n        if(!restockValidation.isValid){\n            errors.push({name: \"err_stockAmount\", msg: restockValidation.msg });\n        }\n        let nameValidation = this.mustBeSomething(name, \"Medicine Name\");\n        if(!nameValidation.isValid){\n            errors.push({name: \"err_name\", msg: nameValidation.msg});\n        }\n        let doseValidation = this.mustBePositiveInteger(dose, \"Dose\");\n        if(!doseValidation.isValid){\n            errors.push({name: \"err_scheduleAmount\", msg: doseValidation.msg });\n        }\n        let strengthValidation = this.mustBeSomething(strength, \"Strength\");\n        if(!strengthValidation.isValid){\n            errors.push({name: \"err_strength\", msg: strengthValidation.msg});\n        }\n        if(errors.length === 0){\n            const med = {\n                personId: personId,\n                name: nameValidation.value,\n                strength: strengthValidation.value,\n                units: units,\n                stockDate: this.today(),\n                stockAmount: restockValidation.value,\n                scheduleAmount: doseValidation.value,\n                everyNdays: everyNdays\n              };\n              (async () => {\n                db.table('meds')\n                    .add(med);\n              })();\n        }\n        return errors;\n    }\n\n    deleteMedication = (medicineId) => {\n        let errors = [];\n        db.table(\"meds\")\n            .where(\"id\")\n            .equals(medicineId)\n            .delete();\n        return errors;\n    }\n\n}\n\nconst dal = new AppDal();\n\nexport default dal;","import React, { Component } from 'react';\nimport db from './db';\nimport dal from './AppDal';\n\nclass EditMedecine extends Component {\n\n    constructor(props){\n        super(props);\n        this.state = {\n            unitList: [\"tablets(s)\",\"ml\"],\n            dayList: [\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\"],\n            personId: props.personId,\n            medicineId: props.medicineId,\n            name: '',\n            strength: '',\n            stockDate: '',\n            units: '',\n            stockAmount: '',\n            scheduleAmount: '',\n            everyNdays: '',\n            err_name: '',\n            err_strength: '',\n            err_stockDate: '',\n            err_units: '',\n            err_stockAmount: '',\n            err_scheduleAmount: '',\n            err_everyNdays: '',\n        };\n    }\n\n    isEmptyOrSpaces(str){\n        return str === null || str === undefined || str.match(/^ *$/) !== null;\n    }\n    \n    isSomething(str){\n        return !this.isEmptyOrSpaces(str);\n    }\n\n    componentDidMount(){\n        if(this.state.medicineId && this.state.medicineId > 0){\n            let that = this;\n            db.table(\"meds\").get(this.state.medicineId)\n            .then(function(med){\n                that.setState({\n                    name: med.name,\n                    strength: med.strength,\n                    units: med.units,\n                    stockDate: med.stockDate,\n                    stockAmount: (that.props.mode === \"restock\") ? '' : med.stockAmount,\n                    scheduleAmount: med.scheduleAmount,\n                    everyNdays: med.everyNdays\n                });\n            });\n        }else{\n            this.setState({\n                units: this.state.unitList[0],\n                everyNdays: this.state.dayList[0]\n            });\n        }\n    }\n\n    doChange_stockAmount = (event) => {\n        this.setState(\n            {stockAmount: event.target.value}\n        );\n    }\n\n    doChange_name = (event) => {\n        this.setState(\n            {name: event.target.value}\n        );\n    }\n    \n    doChange_units = (event) => {\n        this.setState(\n            {units: event.target.value}\n        );\n    }\n    \n    doChange_strength = (event) => {\n        this.setState(\n            {strength: event.target.value}\n        );\n    }\n\n    doChange_stockDate = (event) => {\n        this.setState(\n            {stockDate: event.target.value}\n        );\n    }\n\n    doChange_scheduleAmount = (event) => {\n        this.setState(\n            {scheduleAmount: event.target.value}\n        );\n    }\n\n    doChange_everyNdays = (event) => {\n        this.setState(\n            {everyNdays: event.target.value}\n        );\n    }\n\n    clearErrors = () => {\n        this.setState({\n            err_stockAmount: '',\n            err_everyNdays: '',\n            err_name: '',\n            err_scheduleAmount: '',\n            err_stockDate: '',\n            err_strength: '',\n            err_units: ''\n        });\n    }\n\n    showErrors = (errors) => {\n        if(errors && errors.length){\n            let changes = {};\n            for(let x = 0, xMax = errors.length; x < xMax; x++){\n                changes[errors[x].name] = errors[x].msg;\n            }\n            this.setState(changes);\n        }\n    }\n\n    processRestock = () => {\n        this.clearErrors();\n        let errors = dal.restockMedication(this.state.medicineId, this.state.stockAmount);\n        if(errors.length === 0){\n            this.props.onRestock();\n        }else{\n            this.showErrors(errors);\n        }\n    }\n\n    processDelete = () => {\n        this.clearErrors();\n        let errors = dal.deleteMedication(this.state.medicineId);\n        if(errors.length === 0){\n            this.props.onDelete();\n        }else{\n            this.showErrors(errors);\n        }\n    }\n\n    processAdd = () => {\n        this.clearErrors();\n        let errors = dal.addMedication(\n                this.state.personId,\n                this.state.name,\n                this.state.stockAmount,\n                this.state.scheduleAmount,\n                this.state.strength,\n                this.state.everyNdays,\n                this.state.units\n            );\n        console.log(errors);\n        if(errors.length === 0){\n            this.props.onAdd();\n        }else{\n            this.showErrors(errors);\n        }\n    }\n\n    render(){\n        let classFullname = \"pharma-medicine-control\";\n        let title = \"\";\n        let actionButtons = <></>;\n        let mainContent = <></>;\n        let strengthText = (<></>);\n        if(this.isSomething(this.state.med_strength)){\n          strengthText = (<em>({this.state.med_strength})</em>);\n        }\n        let medDescription = <p><strong>{this.state.med_name}</strong> {strengthText}</p>;\n        if(this.props.medicineId === undefined){\n            classFullname += \" pharma-medicine-add\"\n            title = \"Add New Medicine\";\n            actionButtons = (<>\n                <button \n                    onClick={this.processAdd} \n                    className=\"pharma-btn pharma-btn-add\"\n                >\n                    Add\n                </button>\n            </>);\n            const units = this.state.unitList.slice();\n            const unitOptions = units.map(\n            (a) => {\n                return (<option key={a} value={a}>{a}</option>)\n            }\n            );\n            const days = this.state.dayList.slice();\n            const daysOptions = days.map(\n                (a) => {\n                    return (<option key={a} value={a}>{a}</option>)\n                }\n            );\n            mainContent = (<>\n                <table className=\"pharma-edit-layout\">\n                    <tbody>\n                        <tr>                        \n                            <td colSpan=\"2\" className=\"pharma-edit-layout-error\">\n                                {this.state.err_name}\n                            </td>\n                        </tr>\n                        <tr>\n                            <td className=\"pharma-edit-layout-label\">\n                                name:\n                            </td>\n                            <td className=\"pharma-edit-layout-control\">\n                                <input type=\"text\" value={this.state.name} onChange={this.doChange_name} />\n                            </td>\n                        </tr> \n                        <tr>                   \n                            <td colSpan=\"2\" className=\"pharma-edit-layout-error\">\n                                {this.state.err_units}\n                            </td>\n                        </tr>\n                        <tr>\n                            <td className=\"pharma-edit-layout-label\">\n                                units:\n                            </td>\n                            <td className=\"pharma-edit-layout-control\">\n                                <select onChange={this.doChange_units} value={this.state.units}>\n                                    {unitOptions}\n                                </select>\n                            </td>\n                        </tr>\n                        <tr>                        \n                           <td colSpan=\"2\" className=\"pharma-edit-layout-error\">\n                                {this.state.err_strength}\n                            </td>\n                        </tr>\n                        <tr>\n                            <td className=\"pharma-edit-layout-label\">\n                                strength:\n                            </td>\n                            <td className=\"pharma-edit-layout-control\">\n                                <input type=\"text\" value={this.state.strength} onChange={this.doChange_strength} />\n                            </td>\n                        </tr>\n                        <tr>\n                            <td colSpan=\"2\" className=\"pharma-edit-layout-error\">\n                                {this.state.err_scheduleAmount}\n                            </td>\n                        </tr>\n                        <tr>\n                            <td className=\"pharma-edit-layout-label\">\n                                dose:\n                            </td>\n                            <td className=\"pharma-edit-layout-control\">\n                                <input type=\"text\" value={this.state.scheduleAmount} onChange={this.doChange_scheduleAmount} />\n                            </td>\n                        </tr>\n                        <tr>\n                            <td className=\"pharma-edit-layout-label\">\n                                every\n                            </td>\n                            <td className=\"pharma-edit-layout-control\">\n                                <select onChange={this.doChange_everyNdays} value={this.state.everyNdays} >\n                                    {daysOptions}\n                                </select>\n                                &nbsp; days\n                            </td>\n                            <td className=\"pharma-edit-layout-error\">\n                                {this.state.err_everyNdays}\n                            </td>\n                        </tr>\n                        <tr>\n                            <td colSpan=\"2\" className=\"pharma-edit-layout-error\">\n                                {this.state.err_stockAmount}\n                            </td>\n                        </tr>\n                        <tr>\n                            <td className=\"pharma-edit-layout-label\">\n                                stock level:\n                            </td>\n                            <td className=\"pharma-edit-layout-control\">\n                                <input type=\"text\" size=\"5\" maxLength=\"5\" value={this.state.stockAmount} onChange={this.doChange_stockAmount} />\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>  \n            </>);\n        }else if(this.props.mode === \"delete\"){\n            classFullname += \" pharma-medicine-delete\";\n            title = \"Delete Medicine\";\n            mainContent = (<>\n                <p>You have chosen to delete the following medication:</p>\n                {medDescription}\n                <p>{this.state.scheduleAmount} {this.state.units} every {this.state.scheduleAmount} days</p>\n            </>);\n            actionButtons = (<>\n                <button \n                    onClick={this.processDelete} \n                    className=\"pharma-btn pharma-btn-delete\"\n                >\n                    Delete\n                </button>\n            </>);\n        }else if(this.props.mode === \"restock\"){\n            classFullname += \" pharma-medicine-restock\"\n            title = \"Restock Medicine\"\n            mainContent = (<>\n                <p>You have chosen to restock the following medication:</p>\n                {medDescription}\n                <p>{this.state.scheduleAmount} {this.state.units} every {this.state.scheduleAmount} days</p>\n                <p>Please enter the stock level at the <u>start</u> of <u>today</u></p>\n                <table className=\"pharma-edit-layout\">\n                    <tbody>\n                        <tr>\n                            <td className=\"pharma-edit-layout-label\">\n                                Stock amount:\n                            </td>\n                            <td className=\"pharma-edit-layout-control\">\n                                <input type=\"text\" size=\"5\" maxLength=\"5\" value={this.state.stockAmount} onChange={this.doChange_stockAmount} />\n                            </td>\n                            <td className=\"pharma-edit-layout-error\">\n                                {this.state.err_stockAmount}\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>          \n            </>);\n            actionButtons = (<>\n                <button \n                    onClick={this.processRestock} \n                    className=\"pharma-btn pharma-btn-restock\"\n                >\n                    Restock\n                </button>\n            </>);\n        }else{\n            title = \"Edit Medicine\";\n            classFullname += \" pharma-medicine-edit\"\n        }\n        return (\n            <div className={classFullname}>\n                <h3><code>{title}</code></h3>\n                {mainContent}\n                <p>\n                    <button \n                        onClick={this.props.onCancel} \n                        className=\"pharma-btn pharma-btn-cancel\"\n                        >\n                        Cancel\n                    </button>\n                    {actionButtons}\n                </p>\n            </div>\n        );\n    }\n}\n\nexport default EditMedecine;","import React, { Component } from 'react';\r\nimport './App.css';\r\n\r\nclass Documentation extends Component {\r\n\r\n    render(){\r\n        return (\r\n            <div className=\"theHelpDiv\">\r\n                <h3><span role=\"img\" aria-label=\"Help\">❓</span> Help</h3>\r\n                <h4><span role=\"img\" aria-label=\"Purpose\">🐬</span>Purpose</h4>\r\n                <p>\r\n                    This is a small web app to track multiple medication prescriptions for one or more people, \r\n                    and to show when medicines are predicted to run out.\r\n                </p>\r\n                <h4><span role=\"img\" aria-label=\"Instructions\">📖</span>Instructions</h4>\r\n                <p>\r\n                    The <b>New Person</b> button lets you create a new person.  No need to give the full name, \r\n                    just initials or a nickname will do.</p>\r\n                    <p>\r\n                    The <b>Add Medicine</b> button lets you add a medication for a person.  Just fill out the \r\n                    details and it will work how many full days of days are left before you must get another \r\n                    prescription.  If the person has several pills throughout the day, just give the daily total.\r\n                </p>\r\n                <p>\r\n                    The <b>Restock Medicine</b> button lets you correct the amount of a medicine.  Please enter the \"new\" \r\n                    stock leval at the start of the day (i.e. include, as stock, any meds you have already given <u>today</u>).\r\n                </p>\r\n                <p>\r\n                    The <b>Delete Medicine</b> button will allow you to remove a medication from a user.\r\n                </p>\r\n                <p>\r\n                    The <b>Delete Person</b> button will allow you to remove a person and all their medication\r\n                     from the web app.\r\n                </p>\r\n                <h4><span role=\"img\" aria-label=\"Warning\">⚠️</span>Oops!</h4>\r\n                <p>\r\n                    Deletions (and Additions and Restocks) always go to a confirmation screen, so don't worry \r\n                    about accididentally hitting a button - just click the <b>Cancel</b> button.\r\n                </p>\r\n                <h4><span role=\"img\" aria-label=\"Data\">💾</span>Data</h4>\r\n                <p>\r\n                    Because medication details are highly personal medical data, \r\n                    this app does not store any data remotely.  \r\n                    All prescription and stock level data is stored locally \r\n                    on the phone or tablet or computer you are currently looking at.\r\n                </p>\r\n                <p>\r\n                    This does however mean that if you set up all the information on your phone, \r\n                    it will not appear in your tablet, so please take a moment to choose if it's \r\n                    best for you to keep the information on your personal smartphone,\r\n                     or on a shared tablet or computer.\r\n                </p>\r\n                <h4><span role=\"img\" aria-label=\"Email\">📧</span>Feedback</h4>\r\n                <p>\r\n                    The app email address is: <a href=\"mailto:pharma@molorosh.com\">pharma@molorosh.com</a>.\r\n                    Please feel free to send an email with any feedback, comments, problems, \r\n                    questions or new feature suggestions.\r\n                </p>\r\n                <h4><span role=\"img\" aria-label=\"Crystal Ball\">🔮</span>Future Features</h4>\r\n                <p>\r\n                    The web app does not currently support PRN (<i>Pro Re Nata</i> - Take As Required) medications.\r\n                    That capability is being worked on at the moment, so it will appear sometime in <b>May 2019</b>.  Promise.\r\n                </p>\r\n                <h4><span role=\"img\" aria-label=\"Free of Charge\">🈚</span>Free of Charge</h4>\r\n                <p>\r\n                    This web app is free to use and always will be :-)\r\n                </p>\r\n                <p>\r\n                    <button \r\n                        onClick={this.props.doClose} \r\n                        className=\"pharma-btn pharma-btn-cancel\"\r\n                        >\r\n                        Close\r\n                    </button>\r\n                </p>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default Documentation;","import React, { Component } from 'react';\r\nimport './App.css';\r\n\r\nclass About extends Component {\r\n    \r\n    render(){\r\n        return (\r\n            <div className=\"theAboutDiv\">\r\n                <h3><span role=\"img\" aria-label=\"About\">📜</span> About</h3>\r\n                <p>This web app was written by <a href=\"http://www.molorosh.com\">molorosh</a>.</p>\r\n                <p>If you're a geeky kinda person the source code for the web app is viewable on <a href=\"https://github.com/molorosh/pharma\">github</a></p>\r\n                <p>&copy; 2019 molorosh</p>\r\n                <p>\r\n                    <button \r\n                        onClick={this.props.doClose} \r\n                        className=\"pharma-btn pharma-btn-cancel\"\r\n                        >\r\n                        Close\r\n                    </button>\r\n                </p>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default About;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport db from './db';\nimport './App.css';\nimport EditPerson from './EditPerson';\nimport EditMedicine from './EditMedicine';\nimport Documentation from './Documentation';\nimport About from './About';\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n        // docsMode: 'people','help','about'\n        docsMode: 'people',\n        // mode: 'list','edit','delete','add','restock'\n        mode: 'list',\n        // control: 'undefined', 'person', 'medicine'\n        control: undefined,\n        // personId: the primary key of the person to be added, edited or deleted\n        personId: undefined,\n        // medicineId: the primary key of the medicine to be added, edited or deleted\n        medicineId: undefined,\n        version: \"0.9.0.0\",\n        meds: [],\n    }\n  }\n\n  // this is called before the \"render() method\n  componentDidMount() {\n    this.fetchAllData();\n  }\n\n  isEmptyOrSpaces(str){\n    return str === null || str === undefined || str.match(/^ *$/) !== null;\n  }\n\n  isSomething(str){\n      return !this.isEmptyOrSpaces(str);\n  }\n\n  doShowPeople = () => {\n    this.setState(\n      {\n        docsMode: 'people',\n      }\n    );\n  }\n\n  doShowHelp = () => {\n    this.setState(\n      {\n        docsMode: 'help'\n      }\n    );\n  }\n\n  doShowAbout = () => {\n    this.setState(\n      {\n        docsMode: 'about'\n      }\n    );\n  }\n\n  doEditMedicine = (personId, medicineId) => {\n    this.setState(\n      {\n        mode: 'edit',\n        personId: personId,\n        medicineId: medicineId,\n        control: 'medicine'\n      }\n    );\n  }\n\n  doDeleteMedicine = (personId, medicineId) => {\n    console.log(\"doDeleteMedicine(\" + personId + \",\" + medicineId + \")\");\n    this.setState(\n      {\n        mode: 'delete',\n        personId: personId,\n        medicineId: medicineId,\n        control: 'medicine'\n      }\n    );\n  }\n\n  doRestockMedicine = (personId, medicineId) => {\n    console.log(\"doRestockMedicine(\" + personId + \",\" + medicineId + \")\");\n    this.setState(\n      {\n        mode: 'restock',\n        personId: personId,\n        medicineId: medicineId,\n        control: 'medicine'\n      }\n    );\n  }\n\n  doCancelEdit = () => {\n    this.setState(\n      {\n        mode: 'list',\n        personId: undefined,\n        medicineId: undefined,\n        control: undefined\n      }\n    );\n  }\n\n  doEditUser = (personId) => {\n    this.setState(\n      {\n        mode: 'edit',\n        personId: personId,\n        medicineId: undefined,\n        control: 'person'\n      }\n    );\n  }\n\n  doDeleteUser = (personId) => {\n    this.setState(\n      {\n        mode: 'delete',\n        personId: personId,\n        medicineId: undefined,\n        control: 'person'\n      }\n    );\n  }\n\n  fetchOnlyUsers = () => {\n    db.table('persons')\n      .toArray()\n      .then((persons) => {\n        this.setState( { persons } )\n      });\n  }\n\n  fetchOnlyMeds = () => {\n    db.table('meds')\n      .toArray()\n      .then((meds) => {\n        if(meds && meds.length){\n          for(let x = 0, xMax = meds.length; x < xMax; x++){\n            this.doMedsCalculations(meds[x]);\n          }\n        }\n        this.setState( { meds } )\n      });\n  }\n\n  fetchAllData = () => {\n    // although this works, it should be \n    // re-written to use Dexie \"all\" promise API\n    // so we only update the React state once at the end\n    db.table('persons')\n      .toArray()\n      .then((persons) => {\n        this.setState( { persons, mode: 'list' }, this.fetchOnlyMeds() )\n      });\n  }\n\n  doMedsCalculations = (med) => {\n    let doses = med.stockAmount / med.scheduleAmount; \n    let days = doses * med.everyNdays;\n    let dayFrom = new Date(Date.parse(med.stockDate + \"T00:00:00Z\"));\n    let now = new Date();\n    let today = new Date(Date.UTC(now.getUTCFullYear(), now.getUTCMonth(), now.getUTCDate() ));\n    let until = new Date(dayFrom.valueOf());\n    until.setDate(until.getDate() + days);\n    let timeDiff = (until.getTime() - today.getTime());\n    let dayDiff = Math.ceil(timeDiff / (1000 * 3600 * 24));\n    med.daysLeft = dayDiff;\n    med.until = this.fromDateToDateString(until);\n  }\n\n  callbackMedicineDelete = () => {\n    this.fetchAllData();\n  }\n\n  callbackMedicineRestock = () => {\n    this.fetchAllData();\n  }\n\n  callbackMedicineAdd = () => {\n    this.fetchAllData();\n  }\n\n  callbackPersonDelete = (id) => {\n    // delete the medicines, then the person\n    let that = this;\n    db.table('meds')\n      .where('personId')\n      .equals(id)\n      .delete()\n      .then(function(){\n        db.table('persons').where('id')\n        .equals(id)\n        .delete()\n        .then(function(){\n          that.setState(\n            {\n              mode: 'list',\n              personId: undefined,\n              medicineId: undefined,\n              control: undefined\n            }, \n            () => { that.fetchAllData(); });\n        })\n      })\n  }\n\n  callbackPersonAdd = (name,icon,color) => {\n    const person = {\n      name: name,\n      icon: icon,\n      color: color\n    };\n    db.table('persons')\n      .add(person)\n      .then(this.fetchAllData());\n  }\n\n  handleChangeName = (event) => {\n    this.setState(\n      {newUserName: event.target.value}\n    );\n  }\n\n  doChangeNewUserName = (event) => {\n    this.setState(\n      {newUserName: event.target.value}\n    );\n  }\n\n  doChangeNewUserIcon = (event) => {\n    this.setState(\n      {newUserIcon: event.target.value}\n    );\n  }\n  \n  doChangeNewUserColor = (event) => {\n    this.setState(\n      {newUserColor: event.target.value}\n    );\n  }\n\n  fromDateToDateString = (date) => {\n    let output = date.getFullYear() + '-';\n    let m = date.getMonth();\n    if(m < 9){\n      output += '0'\n    }\n    output += (m + 1) + '-';\n    let d = date.getDate();\n    if(d < 10){\n      output += '0'\n    }\n    output += d;\n    return output;\n  }\n\n  today = () => {\n    return(this.fromDateToDateString(new Date()));\n  }\n\n  render() {\n    if(\n        (this.state.mode !== \"list\" && this.state.control) \n        || this.state.docsMode === \"help\"\n        || this.state.docsMode === \"about\" \n      ){\n      let editControl = undefined;\n      if(this.state.control === \"person\"){\n        editControl = (\n          <EditPerson\n           onCancel={this.doCancelEdit} \n            mode={this.state.mode} \n            personId={this.state.personId}\n            callbackPersonAdd={this.callbackPersonAdd}\n            callbackPersonDelete={this.callbackPersonDelete}\n            >\n          </EditPerson>\n        );\n      }else if(this.state.control === \"medicine\"){\n        editControl = (\n          <EditMedicine\n            onCancel={this.doCancelEdit} \n            onDelete={this.callbackMedicineDelete}\n            onRestock={this.callbackMedicineDelete}\n            onAdd={this.callbackMedicineAdd}\n            mode={this.state.mode} \n            personId={this.state.personId}\n            medicineId={this.state.medicineId}\n            >\n          </EditMedicine>\n        );\n      }else if(this.state.docsMode === \"help\"){\n        editControl = (\n          <Documentation\n            doClose={this.doShowPeople}\n          >\n          </Documentation>\n        );\n      }else if(this.state.docsMode === \"about\"){\n        editControl = (\n          <About\n            doClose={this.doShowPeople}\n            >\n          </About>\n        );\n      }\n      return (\n        <div className=\"App\">\n        <header className=\"App-header\">\n          <div className=\"App-header-div\">\n            <div className=\"App-header-div-logo\"><img src={logo} className=\"App-logo\" alt=\"logo\" /></div>\n            <div className=\"App-header-div-title\"><h1>Pharma</h1></div>\n          </div>\n        </header>\n        <section className=\"AppSection\">\n          {editControl}\n        </section>\n        <footer className=\"App-footer\">\n            <div className=\"App-footer-div\">\n              <div className=\"App-footer-version\"><p className=\"App-footer-version\">Version: <span className=\"App-footer-version\">{this.state.version}</span></p></div>\n              <div className=\"App-footer-copyright\"><p className=\"App-footer-copyright\">&copy; 2019 molorosh</p></div>\n            </div>\n          </footer>\n      </div>    \n      );\n    }\n      // persons\n      let personsHtml = null;\n      let medsHtml = null;\n      if(this.state.persons){\n        const pp = this.state.persons.slice();\n        personsHtml = pp.map((p) =>{\n            let style = { backgroundColor: p.color };\n            // person drug list\n            let meds = this.state.meds.slice();\n            medsHtml = meds.map(\n              (m) => {\n                if(m.personId === p.id){\n                  let strengthText = (<></>);\n                  if(this.isSomething(m.strength)){\n                    strengthText = (<em>({m.strength})</em>);\n                  }\n                  return (\n                    <div className=\"pharma-person-medicine\" key={m.id}>\n                      <p className=\"pharma-person-medicine-edit\">\n                        {\n                          /*\n                          <button \n                          onClick={() => {\n                            this.doEditMedicine(p.id, m.id);\n                          }} \n                          className=\"pharma-btn pharma-btn-edit\"\n                          >\n                            Edit Medicine\n                          </button>\n                          <br/>\n                          */\n                        }\n                        <button \n                          onClick={() => {\n                            this.doRestockMedicine(p.id, m.id);\n                          }} \n                          className=\"pharma-btn pharma-btn-restock\"\n                          >\n                            Restock Medicine\n                        </button>\n                        <br/>\n                        <button \n                          onClick={() => {\n                            this.doDeleteMedicine(p.id, m.id);\n                          }} \n                          className=\"pharma-btn pharma-btn-delete\"\n                          >\n                            Delete Medicine\n                        </button>\n                      </p>\n                      <p><strong>{m.name}</strong> {strengthText}</p>\n                      <p>{m.scheduleAmount} {m.units} every {m.everyNdays} day(s)</p>\n                      <p>days left: <strong>{m.daysLeft}</strong> <em>({m.until})</em></p>\n                    </div>\n                    );\n                }else{\n                  return (undefined);\n                }\n              });\n            return (\n              <div key={p.id} className=\"pharma-person\" style={style}>\n                <p className=\"pharma-delete-person-para\">\n                  <button\n                    onClick={\n                      () => {\n                        this.doDeleteUser(p.id);\n                      }\n                    } \n                    className=\"pharma-btn pharma-btn-delete\" >Delete Person</button>\n                </p>\n                <h1>{p.icon} {p.name}</h1>\n                <h4><span role=\"img\" aria-label=\"Medicine\">💊</span> Medicines</h4>\n                <p>\n                  <button \n                    onClick={() => {this.doEditMedicine(p.id, undefined);}} \n                    className=\"pharma-btn pharma-btn-add\">\n                      Add Medicine\n                    </button>\n                  </p>\n                {medsHtml}\n              </div>\n            );\n        });\n      }\n      \n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <div className=\"App-header-div\">\n            <div className=\"App-header-div-logo\"><img src={logo} className=\"App-logo\" alt=\"logo\" /></div>\n            <div className=\"App-header-div-title\"><h1>Pharma</h1></div>\n          </div>\n        </header>\n        <section className=\"AppSection\">\n            <h3><span role=\"img\" aria-label=\"People\">👥</span> People</h3>\n            <div className=\"theHelp\"><button className=\"pharma-btn pharma-btn-help\" onClick={this.doShowHelp}>Help</button></div>\n            <div className=\"theAbout\"><button className=\"pharma-btn pharma-btn-about\" onClick={this.doShowAbout}>About</button></div>\n            <p>\n              <button className=\"pharma-btn pharma-btn-add\" onClick={() => { this.doEditUser(undefined) }}>New Person</button>\n            </p>\n            <div>\n              {personsHtml}\n            </div>\n          </section>\n          <footer className=\"App-footer\">\n            <div className=\"App-footer-div\">\n              <div className=\"App-footer-version\"><p className=\"App-footer-version\">Version: <span className=\"App-footer-version\">{this.state.version}</span></p></div>\n              <div className=\"App-footer-copyright\"><p className=\"App-footer-copyright\">&copy; 2019 molorosh</p></div>\n            </div>\n          </footer>\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}